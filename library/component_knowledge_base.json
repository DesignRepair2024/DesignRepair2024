[
    {
        "component_type": "badges",
        "description": "",
        "guidelines": {
            "docs_path": "badges_guidelines.md",
            "hard": {
                "do": [
                    "Anatomy#Container#Change the position of the badge for right-to-left languages",
                    "Anatomy#Container#Use the default badge color",
                    "Anatomy#Label text#Truncate badge labels as needed"
                ],
                "dont": [
                    "Anatomy#Container#Badges have fixed positions. Don\u2019t change the position of the badge arbitrarily or place the badge over the icon.",
                    "Anatomy#Container#Avoid using custom color mappings for the badge container and label text. They may not meet accessibility requirements.",
                    "Anatomy#Label text#Don\u2019t let the badge get cut off or collide with another element"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Badges are used to indicate a notification, item count, or other information relating to a navigation destination. They are placed on the ending edge of icons, typically within other components.\n\nThere are 2 types of badges:\n\n1. Small badge\n2. Large badge\n\n![Diagram of 4 badges in different configurations on a navigation bar's destination icons.]\n\nNavigation bar with four badges\n\n \n\nA **small badge** is a simple circle, used to indicate an unread notification.\n\nA **large badge** contains label text communicating item count information.\n\n![A small badge is a circle with no characters]\n\nSmall badge\n\n![A large badge holds four characters and expands its container's width but not height.]\n\nLarge badge",
                    "With other components": "Badges are most commonly used within other components, such as navigation bar, navigation rail, top app bars, and tabs.\n\n![Navigation bar showing focused destination without a badge because the active destination badge is not seen]\n\nIn navigation bars, hide the badge once the destination has been selected"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![img]\n\nSmall badgeLarge badge containerLarge badge label",
                    "Container": "There are 2 container types for the badge. Small badge (with no text) and large badge (with text).\n\n![img]\n\nA small badge uses only shape to indicate a status change or new notification\n\n![img]\n\nA large badge displays a number within a container to indicate a quantifiable status change related to a destination\n\n \n\nBadge containers are anchored inside the icon bounding box. As the number count increases for large badges, their width expands, but keeps the same placement.\n\nBadges use a color intended to stand out against labels, icons, and navigation elements. Use the default color mapping to avoid color conflict issues. \n\n![img]\n\n![img]\n\n \n\n![img]\n\n![img]",
                    "Label text": "Label large badges with counts or a status. The maximum number of characters within large badge label text is four, including a + to indicate more.\n\n![img]\n\n \n\nUse the recommended maximum character count to ensure labels don\u2019t extend beyond the badge container.\n\n![img]\n\n![img]"
                }
            }
        }
    },
    {
        "component_type": "bottom app bar",
        "description": "A component displaying navigation and key actions at the bottom of mobile screens. [Learn more about bottom app bar](https://m3.material.io/m3/pages/bottom-app-bar/overview)",
        "guidelines": {
            "docs_path": "bottom-app-bar_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#Use a bottom app bar to provide convenient access to actions",
                    "Usage#None#Use a snackbar to provide access to undo for destructive actions initiated from the bottom app bar",
                    "Placement#With a top app bar#Place an overflow menu as the last action between the app bars",
                    "Placement#With a top app bar#A bottom app bar can provide consistent access to actions, such as navigation and search, allowing the top app bar to hold contextual, screen-specific actions",
                    "Placement#With snackbars#Inset a snackbar or toast above a bottom app bar and FAB",
                    "Responsive layout#Density#Inset a snackbar or toast above a bottom app bar and FAB"
                ],
                "dont": [
                    "Usage#None#Don't use a bottom app bar on screens with one or no actions (other than a FAB)",
                    "Usage#None#Don\u2019t force actions into a bottom app bar. The icons in this Calendar event invite don\u2019t clearly communicate their meaning.",
                    "Anatomy#FAB (optional)#Do not place a FAB outside of a bottom app bar, as it makes it harder to reach",
                    "Placement#With snackbars#Don't place a snackbar in front of a bottom app bar or FAB",
                    "Responsive layout#Window size classes#Don\u2019t use a bottom app bar on an expanded window size",
                    "Responsive layout#Density#Don\u2019t apply density to app bars"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Bottom app bars provide access to up to four actions, including the [floating action button] (FAB).\n\n![Mobile UI with bottom app bar containing four icon buttons and floating action button]\n\nBottom app bar with four icon buttons and a FAB\n\n \n\n**Bottom app bars should be used for**:\n\n- Mobile devices only\n- Screens with two to five actions\n\n**Bottom app bars shouldn't be used for**:\n\n- Apps with a navigation bar\n- Screens with one or no actions\n\n![Mobile UI of message feed with bottom app bar containing search delete archive and reply icon buttons and floating action button ]\n\n![Mobile UI of message feed with bottom app bar containing search icon button and floating action button ]\n\n \n\nWhen destructive actions such as **Delete** are placed within the bottom app bar, the interaction should trigger a snackbar to confirm the action and provide access to **Undo**.\n\n\n\n \n\n**Bottom app bars aren\u2019t navigation bars**\n\n[Navigation][ bars] provide access to destinations in an app, whereas bottom app bars can contain both destinations and actions.\n\n![Mobile UI of news feed with bottom app bar containing four navigation icons with labels]\n\nBottom navigation bar with four destinations\n\n \n\nNot all products should use a bottom app bar. If the product needs more icon buttons, destinations, or a different structure, consider using alternate components or a custom layout rather than forcing actions into the bottom bar.\n\n![Mobile UI of calendar event invite with bottom app bar containing three filled buttons to RSVP]\n\nexclamationCaution\n\nConsider using a custom layout or other component if a bottom app bar doesn\u2019t fulfill your screen\u2019s needs, such as this set of filled buttons in a Calendar event invite\n\n![Mobile UI of calendar event invite with bottom app bar containing four icon buttons and floating action button]"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Diagram of bottom app bar indicating the 4 parts of its anatomy]\n\nContainerFAB (optional)Icon buttonIcon button for overflow menu",
                    "Container": "Bottom app bar containers hold all bottom app bar elements.\n\n![Bottom app bar container]\n\nBottom app bar container",
                    "FAB (optional)": "When present, a [floating action button] (FAB) is displayed within the bottom app bar. In this case, the FAB has zero elevation and no shadow because the app bar container separates it from other screen content.\n\n![Mobile UI of message feed with bottom app bar containing floating action button]\n\nBottom app bar containing a FAB\n\n \n\n![Mobile UI of message feed with floating action button above bottom app bar]",
                    "Icon buttons": "The bottom app bar can hold four [icon buttons] on the left side of the screen, including an overflow menu icon button (three dots).\n\n![Mobile UI of photos app with bottom app bar containing overflow edit audio and image button icons]\n\nBottom app bar with an overflow menu"
                },
                "Placement": {
                    "general": {},
                    "soft": "",
                    "With a top app bar": "When used with a bottom app bar, [top app bars] can provide navigation and additional actions. Throughout an app, actions should be organized and divided consistently across both bars.\n\nThe following items benefit from specific placement:\n\n- Place navigation control in a top app bar\n- Place a single overflow menu control as the trailing action\n- Place actions, like Search, in a consistent location throughout the app\n\n![Mobile UI with top app bar on secondary screen]\n\nUse a top app bar as a container for upwards navigation on secondary screens\n\n \n\n![Mobile screen with a top app bar containing an overflow menu]\n\n![Mobile UI with bottom app bar containing an overflow menu]",
                    "With snackbars": "To avoid obstruction, snackbars should animate in place vertically above a bottom app bar. Refer to snackbars for more guidance on its layout and positioning.\n\n![Mobile UI of photos app with snackbar above bottom app bar]\n\n![Mobile UI of photos app with snackbar inside bottom app bar with increased height below icon buttons and floating action button]"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "To support the intent of different sections of an app, the layout and actions of a bottom app bar can be changed to suit each screen.\n\nFor example, screens can display more or fewer actions according to what suits the screen content best.\n\n\n\nTo showcase a primary action, this bottom app bar uses a right-aligned FAB",
                    "Window size classes": "#### Compact & medium\n\nBottom app bars are optimized for compact and medium [window size classes].#### Expanded\nBottom app bars are not recommended for use on expanded window size classes. When designing a large-screen view of a mobile product with a bottom app bar, adjust to an alternate composition.\n\n![Expanded window size class UI with bottom app bar]\n",
                    "Density": "Always use the minimum height for bottom app bars.\n\n![Mobile UI of photos app with snackbar above bottom app bar]\n\n![Mobile UI with a comact density]",
                    "Alignment": "Align the layout of elements to the edges of the container. This means the primary action, such as the FAB, is on the leading edge of the container, and secondary actions, such as icon buttons, are aligned to the trailing edge.\n\nThis arrangement reinforces the hierarchy of actions and ensures that the alignment changes to accommodate both left-to-right (LTR) and right-to-left (RTL) languages.\n\n![Leading-edge-aligned bottom app bar on a screen with a language that reads right-to-left.]\n\nBottom app bar alignment flips its layout when language is right-to-left (RTL)"
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "Scrolling": "Upon scroll, the bottom app bar can appear or disappear:\n\n- **Scrolling downward** hides the bottom app bar. If a FAB is present, it detaches from the bar and remains on screen.\n- **Scrolling upward** reveals the bottom app bar, and reattaches to a FAB if one is present\n\n\n\n\n\nA FAB can remain on screen, even as a bottom app bar hides when scrolled off-screen",
                    "Transitions": "When the primary bottom app bar transitions into a secondary bottom app bar, several things occur:\n\n- The FAB\u2019s primary icon fades out, while the secondary icon fades in\n- The bottom app bar\u2019s primary icons fade out, and secondary icons fade in (on the bar\u2019s left-hand side)\n\nWhen the secondary bottom app bar transitions into a primary bottom app bar, several things occur:\n\n- The FAB\u2019s secondary icon fades out, while the primary icon fades in\n- The bottom app bar\u2019s secondary icons fade out, and primary icons fade in (on the bar\u2019s left-hand side)\n\n\n\n\n\nA FAB can remain on screen, even as a bottom app bar hides when scrolled off-screen",
                    "Opening menus": "[Menus] that are generated by the bottom app bar (such as an overflow menu) open as a menu at a higher elevation than the bar.\n\n\n\n![Mobile UI of photos app with elevated open menu positioned above bottom app bar]\n\nThis menu opens from a bottom app bar"
                }
            }
        }
    },
    {
        "component_type": "bottom sheets",
        "description": "A component containing supplementary content that\u2019s anchored to the bottom of the screen. [Learn more about bottom sheets](https://m3.material.io/m3/pages/bottom-sheets/overview)",
        "guidelines": {
            "docs_path": "bottom-sheets_guidelines.md",
            "hard": {
                "do": [],
                "dont": []
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Bottom sheets display supplementary content and actions on a mobile screen.\n\n![img]\n\nBottom sheet containing contacts and applications\n\n \n\nBottom sheets are a versatile component that can contain a wide variety of information and layouts, including menu items (in list or grid layouts), actions, and supplemental content.\n\n![img]\n\nBottom sheet with menu items in a list"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "A container is the only required element of a bottom sheet. Bottom sheet layouts can vary widely to support the types of content they contain.\n\n![img]\n\n1. Container\n2. Drag handle (optional)\n3. Scrim (modal only)",
                    "Container": "Bottom sheet containers hold all bottom sheet elements. Their size is determined by the space those elements occupy.\n\nThe container is the only required element of a bottom sheet. All other elements are optional.\n\n![img]\n\nBottom sheets are flexible containers that adapt to their content and available space",
                    "List items (optional)": "Lists are a continuous group of text or images. List items can include label text, icons, and text buttons, among other elements.\n\n![img]\n\nBottom sheet containing a list with icons",
                    "Dividers (optional)": "Dividers can be used to separate related content in bottom sheets.\n\n![img]\n\nBottom sheet with a divider separating types of actions",
                    "Media (optional)": "**Thumbnail**\nBottom sheets can include thumbnails for an avatar or logo.\n\n**Image**\nBottom sheets can include photos, illustrations, and other graphics, such as weather icons.\n\n**Video**\nBottom sheets can include video.\n\n![img]\n\nBottom sheets can contain thumbnails, images, and video"
                },
                "Standard bottom sheets": {
                    "general": {},
                    "soft": "Standard bottom sheets co-exist with the screen\u2019s main UI region and allow for simultaneously viewing and interacting with both regions, especially when the main UI region is frequently scrolled or panned.\n\nUse a standard bottom sheet to display content that complements the screen\u2019s primary content, such as an audio player in a music app.\n\n![img]\n\nThe music player in this standard bottom sheet allows people to control their music while browsing albums\n\n \n\nAt full-screen height, standard bottom sheets contain a collapse icon in an app bar to return to their initial position.\n\nStandard bottom sheets can contain supplementary content that continues below the screen, such as location information over a map.\n\n\n\nA bottom sheet can have preset positions from full-screen height to preview"
                },
                "Modal bottom sheets": {
                    "general": {},
                    "soft": "Like dialogs, modal bottom sheets appear in front of app content, disabling all other app functionality when they appear, and remaining on screen until confirmed, dismissed, or a required action has been taken.\n\n![img]\n\nA modal bottom sheet must be interacted with or dismissed. Its blocking behavior makes it suitable for a menu, such as in this files app, to help people focus on their available choices.\n\n \n\nUse a modal bottom sheet as an alternative to inline menus or simple dialogs on mobile, especially when offering a long list of action items, or when items require longer descriptions and icons.\n\nModal bottom sheets are used in mobile apps only.\n\n![img]\n\nModal bottom sheets can be used instead of menus to present additional actions",
                    "Visibility": "To provide access to its top actions, the initial vertical position of modal bottom sheets is capped at 50% of the screen height.\n\nModal bottom sheets whose contents exceed 50% of the screen height can then be pulled across the full screen and scrolled internally to access their remaining items.\n\n![img]\n\nThe initial vertical position of modal bottom sheets can't exceed 50% of the screen height\n\n \n\nModal bottom sheets appear when triggered by a user action, such as tapping a button or an overflow icon. They can be dismissed by:\n\n- Tapping a menu item or action within the bottom sheet\n- Tapping the scrim\n- Swiping the sheet down\n- Using a close affordance within the bottom sheet\u2019s top app bar, if available\n\nDisplay a close affordance in a full-screen modal bottom sheet.\n\n![img]\n\nTapping the scrim dismisses a modal bottom sheet\n\n![img]\n\nA modal bottom sheet can be dismissed by swiping the sheet down"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "",
                    "Compact window size": "In compact [window sizes], like mobile devices, bottom sheets extend across the width of a screen and are elevated above the primary content.\n\n![img]\n\nBottom sheets should extend to the width of the screen on mobile",
                    "Medium and expanded window sizes": "For larger screens with medium and expanded window sizes, bottom sheets have a default max-width to prevent undesired layouts and awkward spacing. However, this can be overridden if needed. For more complex tasks and flows, consider using a non-transient surface such as a floating sheet.\n\n![img]\n\nBottom sheets on larger screens like tablet have a max width that can be overridden\n\n \n\nOn larger expanded window sizes, like desktop, a bottom sheet can be swapped for a side sheet that shows similar content.\n\n![img]\n\nSide sheets can contain the same content as bottom sheets and may be more suitable for desktop"
                },
                "Behavior": {
                    "general": {},
                    "soft": "Bottom sheets can offer an expansion option where the sheet is fully raised and toggled between a collapsed and expanded state. This provides a more predictable footprint of the sheet, and can be set by the system or toggled by the user.\n\n![img]\n\nA bottom sheet for sharing can appear fully raised if needed\n\n![img]\n\nAlternately, a bottom sheet for sharing can appear collapsed for a more focused set of actions",
                    "Custom positioning": "The optional drag handle provides an affordance for custom sheet height, or for a quick toggle through preset heights.\n\n![img]\n\nThe optional drag handle provides an affordance for custom sheet height, or for a quick toggle through preset heights\n\n![img]\n\nA bottom sheet can automatically resize to another height after interacting with the drag handle",
                    "Scrolling": "Bottom sheets can be vertically scrolled, independent of the rest of the screen\u2019s content.\n\n![img]\n\nBottom sheets should be scrollable when their content exceeds the initial viewable height"
                }
            }
        }
    },
    {
        "component_type": "buttons",
        "description": "A component helping people initiate actions such as sending an email, sharing a document, or liking a post. [Learn more about buttons](https://m3.material.io/components/all-buttons)",
        "guidelines": {
            "docs_path": "buttons_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#Use buttons for discrete actions",
                    "Usage#None#A button container\u2019s width is dynamically set to fit its label text",
                    "Usage#None#Button container width can be set according to the responsive layout grid",
                    "Anatomy#Label text#Use sentence case for button label text, capitalizing the first word and proper nouns",
                    "Anatomy#Container#A button\u2019s width can be dynamically set to contain the label text",
                    "Anatomy#Icon (optional)#Place the icon to the left of the label in buttons with text in left-to-right languages",
                    "Anatomy#Icon (optional)#Place the icon to the right of the label in buttons with text in right-to-left languages",
                    "Anatomy#Icon (optional)#Use icons that clearly communicate their meaning",
                    "Outlined buttons#None#Outlined buttons can be used on backgrounds with a color gradient"
                ],
                "dont": [
                    "Usage#None#Don\u2019t clutter your UI with too many buttons. Consider presenting lower-priority actions in overflow menus or as icon buttons.",
                    "Usage#None#A button container\u2019s width shouldn\u2019t be narrower than its label text",
                    "Anatomy#Label text#Don\u2019t wrap text. For maximum legibility, label text should remain on a single line.",
                    "Anatomy#Container#A button\u2019s width shouldn\u2019t be smaller than the button\u2019s label text",
                    "Anatomy#Icon (optional)#Don\u2019t vertically align an icon and text in the center of a button",
                    "Anatomy#Icon (optional)#Don\u2019t use two icons in the same button"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Buttons communicate actions that users can take. They are typically placed throughout your UI, in places like:\n\n- Dialogs\n- Modal windows\n- Forms\n- Cards\n- Toolbars\n\n![Video calling screen with 1 filled button and 1 filled tonal button.]\n\nUse visually prominent filled buttons for the most important actions\n\n \n\nButtons are just one option for representing actions in a product and shouldn\u2019t be overused. Too many buttons on a screen disrupts the visual hierarchy.\n\nConsider placing additional actions in a [navigation drawer], set of [chips], text links, or [icon buttons].\n\n![1 button placed on bottom right of screen.]\n\n![3 buttons set side by side on bottom of screen.]\n\n \n\n![Filled button on menu screen.]\n\n![Filled button with label text overflowing the container.]\n\n![Filled button as wide as layout grid.]\n\n \n\n![5 types of buttons]\n\nThere are five types of buttons:\n\n1. Elevated button\n2. Filled button\n3. Filled tonal button\n4. Outlined button\n5. Text button"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Anatomy diagram numbering 3 elements of buttons]\n\nLabel textContainerIcon (optional)",
                    "Label text": "Label text is the most important element of a button. It describes the action that will occur if a user taps a button.\n\nCapitalize the first letter of the first word and proper nouns in button label text. This allows the text to distinguish proper nouns, for example: **Book with Flights** vs **BOOK WITH FLIGHTS**.\n\n \n\n![Button with label text \u201cSee all\u201d]\n\n![Button with label text \u201cSee all recipes\u201d wrapping to a second line.]\n\n \n\nText buttons depend on the color and style of label text to be recognizable from other text and elements.\n\n![Text button labeled \"Reserve\" in a contrasting green color.]\n\nexclamationCaution\n\nIn text buttons, label text should use a different color, style, or layout from other text. In the example above, the **R****eserve** action would be more prominent in a filled button instead of a text button.",
                    "Container": "Button containers hold the label text and optional icon. Text buttons have a visible container only when hovered, focused, or pressed.\n\nButton containers have fully rounded corners.\n\n\n\n![Close-up of button container edge.]\n\nButton containers have fully rounded corners\n\n \n\n![Button with the label text \u201cView playlist\u201d within the container.]\n\n![Button with the label text \u201cView playlist\u201d overflowing the container.]",
                    "Icon (optional)": "Icons visually communicate the button\u2019s action and help draw attention. They should be placed on the leading side of the button, before the label text.\n\n\n\n![Filled button with the icon to the left of the label in a left-to-right language.]\n\n![Filled button with the icon to the right of the label in a right-to-left language.]\n\n \n\n![Button with shopping cart icon and text label \u201cAdd to cart\u201d.]\n\n![Button with Plus icon vertically above the text label \u201cAdd to watch list\u201d.]\n\n![Button with leading download icon, text label \u201cDownload\u201d and trailing close icon.]"
                },
                "Elevated buttons": {
                    "general": {},
                    "soft": "Elevated buttons are essentially filled tonal buttons with a shadow. To prevent shadow creep, only use them when absolutely necessary, such as when the button requires visual separation from a patterned background.\n\n![Elevated button set on a darker background image of bread loaves.]\n\nElevated buttons provide separation from a patterned background\n\n \n\nButtons at higher elevations typically appear more prominent in a design.\n\n![Elevated button in a restaurant app labeled \u201cPlace order\u201d.]\n\nHigher elevation increases the prominence of a button"
                },
                "Filled buttons": {
                    "general": {},
                    "soft": "Filled buttons have the most visual impact after the FAB, and should be used for important, final actions that complete a flow, like **Save**, **Join now**, or **Confirm**.\n\n![Payment app with 1 filled button labelled \"Make payment\".]\n\nFilled buttons have high visual impact when used for important actions\n\n \n\nFilled buttons display a container around a text label. Container size can be described in different ways:\n\n- Set container width to the size of the text label with consistent padding on the left and right\n- Set the container\u2019s relative position to the responsive layout grid\n\nFilled buttons should have containers with a solid color.\n\n![Filled button as wide as the mobile screen.]\n\nFilled button width can be responsive to the layout grid"
                },
                "Filled tonal buttons": {
                    "general": {},
                    "soft": "A filled tonal button is an alternative middle ground between filled and outlined buttons. They\u2019re useful in contexts where a lower-priority button requires slightly more emphasis than an outline would give, such as \"Next\" in an onboarding flow. Tonal buttons use the secondary color mapping.\n\n![Shopping app with two tonal-style filled buttons.]\n\nFilled tonal buttons have less emphasis than other filled buttons"
                },
                "Outlined buttons": {
                    "general": {},
                    "soft": "Outlined buttons are medium-emphasis buttons. They contain actions that are important, but aren\u2019t the primary action in an app.\n\nOutlined buttons pair well with filled buttons to indicate an alternative, secondary action.\n\n\n\n![Onboarding screen with an outlined button on the lower left and a filled tonal button on the lower right.]\n\nOutline buttons contain less important supporting actions\n\n \n\nOutlined buttons display a stroke around the button container, and by default have no fill.\n\n![Outlined button as wide as the mobile screen.]\n\nOutlined buttons display a stroke around the button container\n\n \n\nOutlined buttons can be placed on a variety of backgrounds.\n\n![Outlined button labeled RSVP on a blue/green background]\n\n![2 photos, each with an outlined button with a custom fill.]\n\nexclamationCautionUse caution when placing outlined buttons on top of images. Customizing the button to have a contrasting container fill can help ensure legibility of label text. Or, use a filled button instead."
                },
                "Text buttons": {
                    "general": {},
                    "soft": "Text buttons are used for the lowest priority actions, especially when presenting multiple options.\n\nText buttons can be placed on a variety of backgrounds. Until the button is interacted with, its container isn\u2019t visible.\n\n![Example calendar screen with 3 text buttons.]\n\nUse text buttons for the lowest priority actions\n\n \n\nText buttons are often embedded in components like cards, dialogs, and snackbars. Because text buttons don\u2019t have a visible container in their default state, they don\u2019t distract from nearby content.\n\nThe color and style of the label text must always be recognizable from non-button text and elements.\n\n![ Text button labeled \u201cRetry\u201d in a snackbar.]\n\nText button in a snackbar\n\n![Text button labeled \u201cView album\u201d on an album cover background.]\n\nText button against an image background\n\n \n\nIn cards, text buttons help maintain an emphasis on card content.\n\n![Text button labeled \u201cLearn more\u201d in an information card about sourdough bread.]\n\nText button in a card\n\n \n\nDialogs use text buttons because the absence of a container helps unify the action with the dialog text.\n\nAlign text buttons to the ending edge of dialogs, on the right for left-to-right languages and on the left for right-to-left languages.\n\n\n\n![2 text buttons labeled \u201cCancel\u201d and \u201cSubscribe\u201d aligned to the lower right side of a dialog.]\n\nText buttons in a dialog"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "When scaling layouts for large screen devices, buttons can adapt their visual presentation, alignment, and arrangement to fit different contexts and user needs.\n\n \n\n![Flights app on expanded window size with buttons to the left of flight information.]\n\nFilled buttons in this flights app are left-aligned beside flight information on an expanded window size\n\n![Flights app on mobile device with buttons below flight information.]\n\nFilled buttons in this flights app are right-aligned below flight information on compact and medium window sizes"
                }
            }
        }
    },
    {
        "component_type": "cards",
        "description": "A component containing content and actions that relate information about a subject. [Learn more about cards](https://m3.material.io/m3/pages/cards/overview/)",
        "guidelines": {
            "docs_path": "cards_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#Cards can be shown together",
                    "Behavior#Expanding#Expand a card to reveal information"
                ],
                "dont": [
                    "Usage#None#Don't force content into cards when spacing, headlines, or dividers would create a simpler visual hierarchy",
                    "Behavior#Expanding#Don\u2019t scroll within a card to reveal information"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Use a card to display content and actions on a single topic.\n\nCards should be easy to scan for relevant and actionable information. Elements like text and images should be placed on cards in a way that clearly indicates hierarchy.\n\n![Example card containing text and images]\n\nCards can display content and actions on a single topic\n\n \n\nCards can serve as entry points into deeper levels of detail or navigation, such as a music album or details on an upcoming vacation.\n\n![Example world tour card]\n\nCard text and images show a clear hierarchy\n\n![Card displaying connected details]\n\nUse cards to display related information on a single subject\n\n \n\nCards can be displayed together in a grid, vertical list, or carousel.\n\n![Example of cards together]\n\n![Example of cards filled with content]\n\n \n\nThere are 3 types of cards:\n\n1. Elevated\n2. Filled\n3. Outlined\n\nEach provides the same legibility and functionality, so the type you use depends on style alone.\n\n\n\n![3 types of cards]\n\nElevated card Filled card Outlined card\n\n \n\n![Example elevated card]\n\nElevated cards have a drop shadow, providing more separation from the background than filled cards, but less than outlined cards\n\n![Example filled card]\n\nFilled cards provide subtle separation from the background. This has less emphasis than elevated or outlined cards.\n\n![Example outlined card]\n\nOutlined cards have a visual boundary around the container. This can provide greater emphasis than the other types."
                },
                "Anatomy": {
                    "general": {},
                    "soft": "The card container is the only required element in a card. Card layouts can vary to support the types of content they contain. Below is a common configuration of elements.\n\n \n\n![Diagram of 8 parts of card anatomy]\n\nContainerHeadlineSubheadSupporting textImageButton",
                    "Container": "Card containers hold all card elements. Their size is determined by the space those elements occupy. Card elevation is expressed by the container.\n\nThe card container is the only required element of a card. All other elements are optional.\n\n![Example of card containers ]\n\nCard size is determined by the elements it contains",
                    "Content blocks": "Card contents are grouped into blocks. Content can have different levels of visual emphasis depending on importance.\n\nCard layouts vary to support the types of content they contain.\n\n![Diagram of card content blocks]\n\nCards can contain headline, subhead, supporting text, media, and actions",
                    "Dividers": "[Dividers] can be used to separate regions in cards or to indicate areas of a card that can expand.\n\n![Example of divider running entire width of card]\n\nContent that can be expanded should use full-width dividers (1)\n\n![Example of inset divider indented from edge of card]\n\nUse inset dividers (1), which don\u2019t run the full width of a card, to separate related content",
                    "Media": "**Thumbnail**\nCards can include thumbnails for an avatar or logo.\n\n**Image**\nCards can include photos, illustrations, and other graphics, such as weather icons.\n\n**Video**\nCards can include video.\n\n![Example of card with thumbnail image]\n\nCards can contain thumbnails, images, and video",
                    "Text": "**Headline**\nHeadline text often communicates the subject of the card, such as the name of a photo album or article.\n\n**Subhead**\nSubheads are smaller text elements, such as an article byline or a tagged location.\n\n**Supporting text**\nSupporting text includes body content, such as an article summary or a restaurant description.\n\n![Example of card container with several elements]\n\nHeadline, subhead, and supporting text in a card#### Layering text, icons, and images\nIt isn\u2019t recommended to place text or icons on images. If doing so is necessary, ensure that the image used as background provides sufficient contrast to make the text meet accessibility standards.\n\nAdding a translucent scrim or bounding shape beneath the text or icon can help ensure proper contrast.\n\n![Example of contrasting text on image]\n\nexclamationCaution\n\nEnsure that text on images meets accessible contrast standards\n\n![Example of icon within a bounding shape on image]\n\nexclamationCaution\n\nWhen placing text or icons on images, consider using a bounding shape to ensure proper contrast\n",
                    "Actions": "**Primary action area**\nCards can be one large touch target triggering an expanded detail screen.\n\n![The action area of a card contains rich media and supporting text]\n\nCards can include a primary action area that expands into a full screen view\n\n \n\n**Buttons**\nCards can include buttons for actions such as Learn more or Add to cart.\n\n**Icon buttons**\nCards can include icon buttons for actions such as Save, Heart, or leaving a 4-star review.\n\n**Selection controls**\nCards can also include chips, sliders, checkboxes, and other selection controls.\n\n**Linked text**\nThere can be a link in the supporting text on a card.\n\n![Supplemental text and actions at the bottom of the card]\n\nCards can include multiple action areas containing buttons, links, and other controls\n\n \n\n![Example star rating]\n\nCards can contain icon buttons like stars to rate content\n\n![Example of choice chips]\n\nCards can contain choice chips within the action area\n\n![Example slider control]\n\nCards can contain a slider control within the action area\n\n \n\n**Overflow menu**\nOverflow menus contain related actions. They are typically placed in the upper-right or lower-right corner of a card.\n\n![Example of overflow menus]\n\nOverflow menus are usually located in the upper-right or lower-right corner of a card"
                },
                "Cards in a collection": {
                    "general": {},
                    "soft": "Multiple cards can be grouped together into collections displayed in a grid, list, or carousel. By default, cards in a collection are coplanar, sharing the same resting elevation unless they are picked up or dragged.\n\n![Diagram of cards in grid]\n\nMultiple cards can be grouped into collections with a shared resting elevation",
                    "Grid": "Cards can be displayed together in a grid.\n\n\n\nCards can be displayed in a grid\n\n \n\nThe default grid can be customized in code to show cards in staggered or mosaic grids.\n\n![Example mosaic grid]\n\nCustomized mosaic grid\n\n![Example staggered grid]\n\nCustomized staggered grid",
                    "Vertical list": "Cards can be displayed together in a vertical list.\n\n\n\nCards can be shown in a vertical list",
                    "Carousel": "Cards can be displayed together in a horizontal row or carousel.\n\n\n\nCards displayed together in a horizontal row or carousel"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "As cards scale to adapt to different [window size classes], their position and alignment can also change.\n\nCards and their elements can align left, right, or center as the layout scales.\n\n![Example of card adapting to screen size]\n\nCard position and alignment changes as the screen size changes",
                    "Ergonomics": "Adjust the layout of components to meet the ergonomic needs of large screen devices. For example, a horizontally oriented card in a compact window size may become a larger, vertically oriented card in an expanded window size, lending more space to imagery and typography to fit the larger screen.\n\n![Example of layout change accommodating content]\n\nAdjust component layout so content remains the main focus on large screens",
                    "Visual presentation": "To adjust the presentation of content-focused components, begin with spacing. Allow components like lists, cards, and images to optimize space while filling the region of a screen that suits a device breakpoint\u2019s ergonomic needs.\n\n![Example of components optimizing space]\n\nSpacing adjusts for components such as cards, lists, and images\n\n \n\n![Example of same card with 2 different orientations and element positioning]\n\nExample of the same card with two different orientations and element positioning",
                    "Column-based layouts": "In mobile layouts, components such as lists or cards are stretched to fit the full width of the screen without compromising visual qualities or user experience. When designing for large screens that have the expanded window size, use multiple columns to display content.\n\nAvoid extending UI elements across the screen whenever possible. Groups of related cards can be rearranged to become horizontal rows or carousels, allowing for better content organization on larger screens.\n\n![Example of related cards in a carousel]\n\nWhen designing for large screens, use multiple columns to display content",
                    "Small screens": "On smaller screens with the compact window size, consider swapping cards for lists, which can display images and text in a more compact form. Just make sure that controls, actions, and other component-specific elements are maintained.\n\n\n\nCertain devices or user contexts require different components to meet platform expectations"
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "Expanding": "Cards use a [container transform] transition pattern to reveal additional content. This pattern should be reserved for hero moments that are meant to be expressive.\n\nA card expands to fill the full screen using a parent-child transition.\n\n\n\nCards use a container transform transition pattern to reveal additional content",
                    "Navigation": "Cards can use a [forward and backward] transition pattern to navigate between screens at consecutive levels of hierarchy. This pattern has a simpler motion style compared to container transform, which makes it suitable for common navigation transitions.\n\n\n\nCards can use a forward and backward transition pattern to navigate between screens"
                }
            }
        }
    },
    {
        "component_type": "carousel",
        "description": "",
        "guidelines": {
            "docs_path": "carousel_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#Set carousel item sizes that ensure the images and text are easy to read and recognize"
                ],
                "dont": [
                    "Anatomy#Item text#Avoid exceeding two lines of text in carousel items on mobile devices"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Carousels display a row of items, such as a collection of photos, recipes, or music tracks. Carousel items can contain brief text that adapt to the item size.\n\n![Contained carousel with a large item, medium item, and small item. Text is truncated on the small item.]\n\nA carousel can contain different sized items at once\n\n \n\nCarousel items should be fully visible on the screen, regardless of window size. Scrolled items snap into place to maintain the same layout.\n\n![Carousel with a large, medium, and small item. All images and text are legible.]\n\n![Carousel with a large, medium, and small item. The small item is very thin, making the image unrecognizable.]\n\nexclamationCaution\n\nAvoid setting carousel items so small that the image isn't recognizable"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![4 elements of a carousel.]\n\nContainerLarge carousel itemMedium carousel itemSmall carousel item",
                    "Container": "The carousel container holds all carousel items. The number of carousel items visible in the container can change based on the carousel layout and the [window size class].\n\n![Carousel container outline.]\n\nThe carousel container is a rectangle. It can be used in many ways and stretched to any size.",
                    "Carousel items": "Carousel items are separate content elements grouped within a carousel. There are three sizes: large, medium, and small.\n\nItems may change size when scrolled to maintain the same layout.\n\n![3 sizes of carousel items.]\n\nLarge carousel itemMedium carousel itemSmall carousel item",
                    "Item text": "Carousel items are primarily visual. Item text is optional and should be brief. If your carousel items require a lot of text, consider using a series of [cards] instead.\n\n![Contained carousel items with 5 lines of content: a title, a description, and a label.]\n\n \n\nThe content within a carousel item can adapt based on the container size and device width. \n\nText should always be understandable at each size. Consider adapting the text to use brief labels on smaller carousel items.\n\n![A carousel item at 3 different sizes to show  how text changes at each size.]\n\nLarge carousel item with the full title and label textMedium carousel item hiding the title textSmall carousel item abbreviating the label text"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "As the carousel container size increases, so does the number of carousel items that are visible at once.\n\nIn compact [window sizes], carousels can comfortably show up to three carousel items at once. \n\nIn medium and expanded window sizes, more carousel items can be visible at once.\n\n\n\nCarousels can show more items at once on larger screens",
                    "Density": "Carousels on compact window sizes may obscure content if there are more than three items visible at once. \n\nCarousel items at their largest size should  be easy to understand and recognize. \n\nAvoid exceeding three items on mobile if the carousel items have text.\n\n![Carousel on a phone. 3 medium items and 1 small item are fully visible. The items don't have text.]\n\nexclamationCaution\n\nOnly use more than three items on mobile if they're easy to understand and recognize"
                },
                "Behavior": {
                    "general": {},
                    "soft": ""
                }
            }
        }
    },
    {
        "component_type": "checkbox",
        "description": "A component allowing users to select one or more items from a set. Checkboxes can turn an option on or off. [Learn more about checkboxes](https://m3.material.io/m3/pages/checkbox/overview)",
        "guidelines": {
            "docs_path": "checkbox_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#Checkboxes let users select one or more options from a list. A parent checkbox allows for easy selection or deselection of all items."
                ],
                "dont": [
                    "Usage#None#If a list consists of multiple options, don't use switches. Instead, use checkboxes. Checkboxes imply the items are related, and take up less visual space."
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Use checkboxes to:\n\n- Select one or more options from a list\n- Present a list containing sub-selections\n- Turn an item on or off in a desktop environment\n\n![List of 80's songs indicating choice through checkbox selection]\n\n \n\nCheckboxes should be used instead of switches if multiple options can be selected from a list\n\n![List indicating choice with checkbox selection]\n\n![A list with multiple switches selected]",
                    "Alternate selection controls": "Checkboxes are one of several selection controls, which allow users to make choices such as selecting options or switching settings on or off.\n\nRadio buttons and switches are alternative selection controls that can be used to enter decisions or declare preferences such as settings or dialogs.\n\n![Diagram of 2 radio buttons, one selected and one unselected]\n\nRadio buttons\n\n![Diagram of 2 switches, one selected and one unselected]\n\nSwitches"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Diagram of checkbox indicating the 2 parts of its anatomy]\n\nContainer Icon"
                },
                "Placement": {
                    "general": {},
                    "soft": ""
                }
            }
        }
    },
    {
        "component_type": "chips",
        "description": "A component for helping people enter information, make selections, filter content, or trigger actions. Chips can show multiple interactive elements together in the same area, such as a list of selectable movie times, or a series of email contacts. [Learn more about chips](https://m3.material.io/m3/pages/chips/overview/)",
        "guidelines": {
            "docs_path": "chips_guidelines.md",
            "hard": {
                "do": [
                    "Usage#**Chips aren\u2019t buttons**#Do use chips to present contextual, supplemental options",
                    "Usage#**Chips aren\u2019t buttons**#Do use buttons for flow-ending actions",
                    "Usage#**Chips aren\u2019t buttons**#Chips can be scrolled horizontally",
                    "Anatomy#Container#Instead of elevation, chips can use an outline to define their container edge",
                    "Anatomy#Container#Chips may use elevation when placed on an image",
                    "Anatomy#Label text#Keep chip labels short and clear"
                ],
                "dont": [
                    "Usage#**Chips aren\u2019t buttons**#Don\u2019t use a chip in place of a button. Static actions that move the user forward or backward in the flow, like Save or Cancel, should be displayed as buttons.",
                    "Usage#**Chips aren\u2019t buttons**#Don't use chips for flow-ending actions",
                    "Usage#**Chips aren\u2019t buttons**#Don\u2019t display a single chip by itself. Chips should appear in a set.",
                    "Anatomy#Container#Don\u2019t elevate resting state chips unless they are placed over content requiring separation",
                    "Anatomy#Container#Don\u2019t elevate chips when pressed. Use the ripple to visually indicate interaction.",
                    "Anatomy#Label text#Don\u2019t use chip labels longer than 20 characters",
                    "Filter chips#None#Filter chips should not present only a single option"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Chips allow users to enter information, make selections, filter content, or trigger actions. While buttons are expected to appear consistently and with familiar calls to action, chips should appear dynamically as a group of multiple interactive elements.\n\n![3 assist chips in restaurant review app]\n\nChips appear as a group of interactive elements",
                    "**Chips aren\u2019t buttons**": "Chips and buttons are similar in that they both provide visual cues to prompt users to take actions and make selections. However, there are important distinctions to be aware of.\n\nMultiple chips should appear together in a group, whereas there should be no more than 3 buttons in a single arrangement.\n\n![Chips used for Save and Cancel actions in a dialog]\n\n![Chips used for \u201cReserve a table\u201d and \u201cOrder delivery\u201d in a restaurant app]\n\n \n\nChips are reactive and contextual, whereas buttons are static and predetermined. A chip should offer a different action depending on the nature of the content it supports, whereas a button should be a persistent fixture of a layout. From a user-flow perspective, chips represent forking paths in an experience while a button represents a linear step along a flow.\n\n![Chip labeled \u201cSave task\u201d in a task management app]\n\n![Button labeled \u201cSave task\u201d in a task management app]\n\n \n\nChips should always appear in a set. Chip sets can be scrolled horizontally.\n\n![Single chip in event reminder]\n\n![Multiple chips in event reminder]",
                    "Types": "Choose the type of chip based on its purpose and author. Does the chip represent an action, communicate information, or filter results? Is its content generated by the product? Is it generated by the person using the product?\n\n![4 chip types]\n\nThere are 4 types of chips:\n\n1. Assist \n2. Filter \n3. Input \n4. Suggestion\n\n \n\n| Purpose, author               | Chip type                                                    | Rationale                                                    | Example                                     |\n| ----------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------- |\n| Action, product-authored      | [Assist chip] | Assist chips represent smart or automated actions that can span multiple apps. | \u201cAdd to calendar\u201d action                    |\n| Filter, product-authored      | [Filter chip] | Filter chips represent filters for a collection.             | Platform selector on material.io/components |\n| Information, user-authored    | [Input chip] | Input chips represent discrete pieces of information entered by a user. | Gmail contact in the \u201cTo\u201d field             |\n| Information, product-authored | [Suggestion chip] | Suggestion chips help narrow a user\u2019s intent by presenting dynamically generated suggestions. | Suggested chat response                     |"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Diagram of 4 elements of a chip]\n\nContainerLabel textLeading icon or image (optional)Trailing remove icon (optional, input & filter chips only)",
                    "Container": "All chips are slightly rounded with an 8dp corner.\n\n![Diagram of rounded corner of chip container]\n\nChips have rounded corners#### Shadows and elevation\nChip containers can be elevated if the placement requires protection, such as on top of an image.\n\n![3 elevated assist chips above image of Mount Rushmore]\n\nIf a chip needs visual protection, its container can be elevated\n\n \n\n![3 types of chips in an outlined style]\n\n![3 types of chips in an elevated style above restaurant photograph]\n\n \n\n![4 elevated chips above blank background]\n\n![Elevated chip in pressed state]\n",
                    "Label text": "Chip label text should be 20 characters or fewer, and have the same typography style as buttons.\n\nFilter labels should describe the nature of a filter set, while remaining short and succinct for the limited space available. It's OK to skip conventional grammar rules, such as articles (take \"a\" walk), to save space. \n\n![Filter chip in maps app labeled \u201cWalking\u201d]\n\n![Filter chip in maps app labeled \u201cWalking navigation session\u201d]",
                    "Input chipAssist chipSuggestion chipFilter chip Button (for comparison)Word choiceUser-generatedBegins with a verb unless the verb is **see** or **view**Noun / CategoryNoun / CategoryVerb**Example** **1**username@gmail.comOpen in DriveHeightHeightSave**Example 2**RedMenuDogsDogsCheckout": "",
                    "Leading icon or image (optional)": "Chips can contain an icon, logo, or image in a circular crop to represent the entity entered by the user.\n\nSystem icons can also be used as a leading thumbnail for chips, such as when signifying filtered types in a search query.\n\n![2 input chips, one with a leading circular avatar and the other with a leading icon]\n\nInput chips can contain a circular-cropped icon, logo, or image\n\n \n\nLeading icon color for unselected chips can be customized through theming. While the default color is [primary], the [on surface variant] color is a good alternative for when the icon style requires less emphasis.\n\n![2 screens of a restaurant page with chips labeled \"Add photos\" and \"Add dishes.\" The leading icons are green and grey.]\n\n**Primary** color (left) and **on surface variant** color (right)\n\n \n\nLeading images are sized larger than leading icons to provide more space for detail. \n\nWhere icons are specifically designed to be legible at small sizes, images such as user-selected avatars often benefit from additional room.\n\nSee the [Specs tab] for precise measurement values.\n\n![2 input chips, one with a leading avatar 24dps big and the other with a leading icon 18dps big]\n\nLeading images, such as avatars, are sized larger than leading icons or logos",
                    "Trailing remove icon (optional, input and filter chips only)": "In medium and expanded [window sizes], like tablet and desktop, input and filter chips may contain a trailing **X** icon to directly remove the chip.\n\n![\u201cX\u201d Close icon in chip]\n\nexclamationCaution\n\nThe **X** icon (A) should be vertically centered in the chip and placed within equal margins on either side (B)\n\n![Diagram of target size of \u201cX\u201d Close icon in chip]\n\nexclamationCaution\n\nInclude the left and right margins (A) around the icon (B) to give the Close icon action a target size that is accessible on desktop and tablet"
                },
                "Assist chips": {
                    "general": {},
                    "soft": "Assist chips represent smart or automated actions that can span multiple apps, such as opening a calendar event from the home screen. Assist chips function as though the user asked an assistant to complete the action. They should appear dynamically and contextually in a UI.\n\nAn alternative to assist chips are buttons, which should appear persistently and consistently.\n\n![2 assist chips labeled \u201cAdd to my itinerary\u201d and \u201c12 mins from hotel\u201d on map screen about Los Cantantes]\n\nThe text in most assist chips begins with a short verb (like Get or Add)\n\n \n\n![2 assist chips labeled \u201cEvent location\u201d and \u201cChat\u201d on phone lock screen]\n\nAn assist chip can surface supplemental information like a calendar event, as well as provide contextual actions\n\n![Assist chip transformed into time picker with radio buttons]\n\nDuring an interaction, assist chips can transform into modals, transition into full-screen views of new content, or readjust to display more results inline\n\n \n\nAssist chips can trigger an action or show progress and confirmation.\n\n\n\nTapping an assist chip triggers a contextual action\n\n\n\nAssist chips can show progress and confirmation feedback\n\n \n\nAssist chips are displayed after primary content, such as below a card or persistently at the bottom of a screen.\n\n![3 assist chips labeled \u201cTurn on lights\u201d, \u201cSet alarm\u201d, and \"Close Blinds\" on Welcome Home screen.]\n\nAssist chips should be shown underneath primary content"
                },
                "Filter chips": {
                    "general": {},
                    "soft": "Filter chips use tags or descriptive words to filter content. They can be a good alternative to toggle buttons or checkboxes.\n\nTapping on a filter chip activates it and appends a leading checkmark icon to the starting edge of the chip label.\n\n![4 filter chips labeled \u201cDocs\u201d \u201cSlides\u201d \u201cSheets\u201d and \u201cImages\u201d with \u201cSlides\u201d and \u201cSheets\u201d selected]\n\nFilter chips rely on tags or descriptive words to filter content\n\n \n\n![5 filter chips representing popular electronics categories in a shopping app. The chip \u201cGame consoles\u201d is selected. ]\n\nFilter chips in a shopping app\n\n![6 filter chips representing apartment amenities in a real estate app. 2 of the chips are selected.]\n\nFilter chips in a real estate app\n\n \n\nTap a chip to select it. Multiple chips can be selected or unselected.\n\n![6 filter chips representing apartment amenities in a real estate app. 2 selected chips include checkmarks while 4 don\u2019t.]\n\nAn icon can be added to indicate when a filter chip is selected\n\n![A filter chip is selected from a group of 6 chips. 3 of the chips disappear, changing ]\n\nFilter chip suggestions can dynamically change as users start to select filters\n\n \n\nAlternatively, a single chip can be selected. This offers an alternative to toggle buttons, radio buttons, or single select menus.\n\n\n\nFilter chips can be set so that selecting a single chip automatically deselects all other chips in the set\n\n \n\nIn medium and expanded [window sizes], like tablet and desktop, filter chips may contain a trailing icon to directly remove the chip or open a menu of options.\n\n![Filter chip with trailing close icon]\n\nThe **X** close icon indicates that a user can unselect the filter chip\n\n![Filter chip with trailing menu icon]\n\nA trailing menu icon indicates that a user can select the chip to see a list of filter options\n\n \n\nWhen combined with a [menu], the filter chip opens a list of selectable options.\n\n\n\nexclamationCaution\n\nOn compact window sizes, like mobile devices, use a trailing menu icon with caution as the target area is often too small for an accessible interaction\n\n \n\nFilter chips can be used with other components, such as search fields and sheets.\n\n![4 filter chips below search field]\n\nFilter chips can be shown underneath a search field\n\n \n\n![Tags used as filter chips in a file application]\n\nOther components, such as search fields and sheets, can incorporate filter chips\n\n \n\n![6 filter chips wrapping to 2 rows]\n\nFilter chips can wrap to a new row. If there are more than 2 rows, consider using horizontal scrolling to access them all.\n\n![4 filter chips with right-most chip partly offscreen, indicating the chips are horizontally scrollable]\n\nFilter chips can scroll horizontally to show unlimited options\n\n \n\n![Single filter chip option beneath the header \u201cCategory\u201d]"
                },
                "Input chips": {
                    "general": {},
                    "soft": "Input chips represent discrete pieces of information entered by a user, such as Gmail contacts or filter options within a search field.\n\nThey enable user input and verify that input by converting text into chips.\n\n![Contacts transformed into 2 input chips in a draft event invite]\n\nInput chips transform text based on user input\n\n \n\nInput chips can support editing to change their contents, such as correcting an email address. In edit mode, the chip reverts back to a text string. Editing can be triggered by interacting with the chip, either by selecting it or by a second interaction after selection.\n\n\n\nInput chips converted from email addresses are editable\n\n \n\n\n\nUsing the backspace key with the cursor before a chip selects the entire chip. The chip can then be deleted when the user taps the backspace key again.\n\n \n\nA single field can contain multiple input chips, and those chips can be reordered or moved into other fields.\n\n![2 input chips in the \u201cTo\u201d field of an email draft]\n\nMultiple input chips in one field\n\n![1 input chip moved from the \u201cTo\u201d field to the \u201cCC\u201d field of an email draft]\n\nInput chips being moved from one field to another\n\n \n\nInput chips can expand to show more information or options. A container transform transition pattern is used to reveal additional content.\n\n\n\nInput chips can expand",
                    "Placement": "Input chips can be integrated with other components.\n\nThey can appear:\n\n- Inline with the text input cursor in a field\n- In a stacked list\n- In a list that can be horizontally scrolled\n\n![4 input chips wrapping to 2 rows]\n\nInput chips can wrap to a new row if all chips need to be visible\n\n\n\nInput chips that scroll horizontally",
                    "Icons and images": "Input chips can contain an icon, logo, or image in a circular crop to represent the entity entered by the user.\n\nSystem icons can also be used as a leading thumbnail for input chips, such as when signifying filtered types in a search query.\n\n![2 input chips, 1 with leading thumbnail, 1 with leading icon]\n\nInput chips can contain an icon, logo, or circular-cropped image\n\n \n\nIn medium and expanded [window sizes], like tablet and desktop, input chips may contain a trailing **X** icon to directly remove the chip.\n\nUsing this **X** is cautioned in compact window sizes, like mobile, as the target area is too small for accessibility.\n\n1. Close icon\n2. Interactive target, including 8dp of padding\n\n![Diagram of chip indicating vertical icon alignment]\n\nexclamationCaution\n\nThe **X** icon should be vertically centered in the chip and placed within equal margins on either side\n\n![Diagram of chip indicating size of interaction target for trailing icon]\n\nexclamationCaution\n\nInclude the left and right margins around the icon to give the close action a target size that is accessible on desktop and tablet\n\n \n\nThe trailing **X** is always aligned to the end side of the container. It\u2019s placed on the right for left-to-right (LTR) languages, such as English, and on the left for right-to-left (RTL) languages, such as Farsi.\n\n![2 input chips with trailing icons following the label text]\n\nInput chips with trailing Close icons\n\n![3 input chips with trailing icons following the label text]\n\nInclude the left and right margins around the icon to give the close action a target size that is accessible on desktop and tablet\n\n \n\n\n\nOverflowed chips in a text field should follow the same behavior as regular text. An unfocused text field with overflowed content should display the beginning of the input; tapping the field snaps the user to the end of the input with the cursor and keyboard active."
                },
                "Suggestion chips": {
                    "general": {},
                    "soft": "Suggestion chips help narrow a user\u2019s intent by presenting dynamically generated suggestions, such as possible responses or search filters.\n\n![3 suggestion chips offering ID options in a photo-recognition app]\n\nThe text labels within suggestion chips are most often nouns or short phrases\n\n \n\n![3 suggestion chips with automated reply options in a chat app]\n\nSuggestion chips can offer quick-reply options in a chat or email app\n\n![2 suggestion chips with search options \u201cWhat\u2019s the weather today?\u201d and \u201cWhat\u2019s the news?\u201d]\n\nA suggestion chip can help the user start a search"
                }
            }
        }
    },
    {
        "component_type": "date pickers",
        "description": "A component that lets users select a date, or a range of dates. [Learn more about date pickers](https://m3.material.io/m3/pages/date-pickers/overview)",
        "guidelines": {
            "docs_path": "date-pickers_guidelines.md",
            "hard": {
                "do": [
                    "Modal date input#Usage#For dates that don\u2019t require a calendar view, the modal date input can be the default view",
                    "Modal date input#Usage#Alternatively, a text field with appropriate hint text can prompt for dates, such as in a form"
                ],
                "dont": []
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Date pickers let people select a date or range of dates. They should be suitable for the context in which they appear.\n\nDate pickers can be embedded into:\n\n1. Dialogs on compact [window sizes] like mobile\n2. Text field drop-downs on medium and expanded window sizes like tablet and desktop\n\n![img]\n\nDate picker dialog on mobile Date picker text field dropdown on desktop\n\n \n\nThere are three types of date pickers:\n\n1. Docked date picker\n2. Modal date picker\n3. Modal date input\n\n![img]\n\nDocked date picker\n\n \n\n![img]\n\n2. Modal date picker\n\n![img]\n\n3. Modal date input"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "",
                    "Docked date picker": "![img]\n\nText field Menu button Icon button Label text Menu Text buttons Container\n\n![img]\n\n1. Text field \n2. Menu button \n3. Menu",
                    "Modal date picker": "![img]\n\nHeadline textSupporting (label) textContainerIcon buttonPrevious/Next Month buttonsDay of week labelsDate (today)Date (unselected)ButtonsDate (selected)Menu buttonDivider\n\n![img]\n\nHeadline textSupporting (label) textContainerIcon buttonYear (unselected)Year (selected)Text buttonsDividerMenu button",
                    "Modal date input": "![img]\n\nHeadline textSupporting (label) textContainerIcon buttonDate inputText buttonsDivider",
                    "Full-screen date picker": "![img]\n\nHeadline textSupporting (label) textIcon buttonContainerText buttonIcon buttonDay of week labelsDividerDate (today)Date range middle (unselected)Date (unselected)ButtonsDate range start/end (selected)Month label"
                },
                "Docked date picker": {
                    "general": {},
                    "soft": "",
                    "Usage": "Docked date pickers allow the selection of a specific date and year. The docked date picker displays a date input field by default, and a dropdown calendar appears when the user taps on the input field. Either form of date entry can be interacted with.\n\nDocked date pickers are ideal for navigating dates in both the near future or past and the distant future or past, as they provide multiple ways to select dates.\n\n![img]\n\nDocked date picker on desktop",
                    "Behavior": "Dates can be added by using a keyboard or by navigating the calendar UI; both options are immediately available when the docked date picker is accessed.\n\n![img]\n\nDocked date picker\n\n \n\n\n\nDocked date pickers adjust size dynamically\n\n\n\nThe year selection menu replaces the calendar view",
                    "Month selection": "Month selection can be navigated with the corresponding back and next arrows or by tapping the dropdown menu.\n\n![img]\n\nDocked date picker month selection",
                    "Year selection": "Year selection can be navigated with the corresponding back and next arrows or by tapping the dropdown menu.\n\n![img]\n\nDocked date picker year selection"
                },
                "Modal date picker": {
                    "general": {},
                    "soft": "",
                    "Behavior": "Modal date pickers navigate across dates in several ways:\n\n- To navigate across months, swipe horizontally\n- To navigate across years, scroll vertically\n- To access the year picker, tap the year\n\nDon\u2019t use a modal date picker to prompt for dates in the distant past or future, such as a date of birth. In these cases, use a modal input picker or a docked date picker instead.\n\n \n\n\n\nTo navigate across months, swipe horizontally\n\n\n\nTo navigate across years, tap the year picker and scroll vertically",
                    "Date range selection": "Date range selection provides a start and end date.\n\nCommon use cases include:\n\n- Booking a flight\n- Reserving a hotel\n\nModal date range pickers navigate across date ranges in several ways:\n\n- To select a range of dates, tap the start and end dates on the calendar\n- To navigate across months, scroll vertically\n\n \n\n\n\nModal date range picker\n\n\n\nModal date range picker with vertical scroll"
                },
                "Modal date input": {
                    "general": {},
                    "soft": "",
                    "Usage": "Modal date inputs allow the manual entry of dates using the numbers on a keyboard. Users can input a date or a range of dates in a dialog.\n\n![img]\n\nModal date input\n\n \n\n![img]\n\n![img]"
                },
                "Behavior": {
                    "general": {},
                    "soft": "You can swap between the modal date picker and modal date input using the edit or calendar icon.\n\n \n\n\n\nSwitching from a modal date picker to a mobile date input for selecting ranges\n\n\n\nSwitching from a modal date picker to a modal date input for selecting a single date",
                    "Compact window sizes": "On compact [window sizes], such as mobile, a full-screen modal date picker is recommended to increase readability and touch target size. It can cover the entire screen.\n\n![img]\n\nA full-screen modal date picker on mobile",
                    "Medium and expanded window sizes": "The docked date picker works best for medium and expanded window sizes. It displays a date input field by default, and a dropdown calendar appears when the user taps on the input field. The user can interact with either form of date entry.\n\nDocked date pickers are ideal for navigating dates in both the near future (or past) and the distant future (or past), as they provide multiple ways to select dates.\n\n![img]\n\nA docked date picker with a full calendar view is best used on larger devices",
                    "Selection": "Selection is indicated through color, drawing visual attention. In date ranges, start and end dates are selected, while dates in-between appear connected with a subtle highlight.\n\n\n\nDifferences between selected the selected date range (August 17\u201323) and today's date (August 5) are shown through color and fill",
                    "Appearing and disappearing": "Like other kinds of dialogs, modal date pickers use an enter and exit transition pattern to appear on the screen. \n\nTo exit a date picker, the input can either be confirmed (\u201cOK\u201d) or dismissed (\u201cCancel\u201d). Interacting outside of the dialog will also dismiss the time picker. Unless one of these actions is taken, a time picker will continue to retain focus. Mobile full-screen pickers also have an additional close affordance (x) icon button and \u201csave\u201d confirmation.\n\nDocked date pickers appear just below the input field.\n\n \n\n\n\nModal date pickers can be dismissed through interacting with content outside the dialog, or with the action buttons in the lower right\n\n\n\nInteracting with the input for a docked date picker makes the calendar view appear below"
                }
            }
        }
    },
    {
        "component_type": "dialogs",
        "description": "A component providing important prompts in a user flow. They can require an action, communicate information, or help users accomplish a task. [Learn more about dialogs](https://m3.material.io/m3/pages/dialogs/overview/)",
        "guidelines": {
            "docs_path": "dialogs_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#Use dialogs for prompts that block an app\u2019s normal operation, and for critical information that requires a specific user task, decision, or acknowledgement",
                    "Anatomy#Headline (optional)#This dialog title poses a specific question, concisely explains what\u2019s involved in the request, and provides clear actions",
                    "Anatomy#Headline (optional)#Find ways to shorten app bar text, and place longer headlines into the content area (1) of a full-screen dialog",
                    "Anatomy#Buttons#Disable confirming actions (1) until a choice is made. Dismissive actions are never disabled",
                    "Anatomy#Buttons#A single action may be provided only if it\u2019s an acknowledgement",
                    "Anatomy#Buttons#Display 2 text buttons next to one another"
                ],
                "dont": [
                    "Usage#None#Don\u2019t use dialogs for low- or medium-priority information. Instead, use a banner (which can be dismissed) or snackbar (which disappears automatically).",
                    "Anatomy#Headline (optional)#Don\u2019t use dialog titles that pose an ambiguous question",
                    "Anatomy#Buttons#Don\u2019t place dismissive actions (1) to the right of confirming actions. Instead, place them to the left of confirming actions.",
                    "Anatomy#Buttons#Avoid presenting users with unclear choices. \u201cCancel\u201d doesn't make sense here because no clear action is proposed.",
                    "Full-screen dialog#**Confirmation**#A \u201cClose\u201d button (1) is vague because it does not indicate whether changes will be saved or discarded"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "A dialog is a modal window that appears in front of app content to provide critical information or ask for a decision. Dialogs disable all app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken.\n\nDialogs are purposefully interruptive, so they should be used sparingly. A less disruptive alternative is to use a menu, which provides options without interrupting a user\u2019s experience.\n\n \n\n![Diagram of basic and full-screen dialogs.]\n\nThere are two types of dialogs:\n\n1. Basic dialog\n2. Full-screen dialog\n\n \n\n![Dialog in front of app content]\n\n![Low priority dialog in front of app content]"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "",
                    "Basic dialog": "![Diagram of 7 elements of basic dialog]\n\nContainerIcon (optional)Headline (optional)Supporting textDivider (optional)ActionsScrim",
                    "Full-screen dialog": "![6 elements of full-screen dialog]\n\nContainerHeader regionClose affordanceHeadline (optional)ActionDivider (optional)",
                    "Container and scrim": "Dialog containers appear above other screen elements and hold the dialog\u2019s headline, text, buttons, and list items.\n\nTo focus attention on the dialog, surfaces behind the container are scrimmed with a temporary overlay to make them less prominent.\n\n![Basic dialog shown above a scrim overlay that reduces the prominence of the background elements]\n\nBasic dialogs appear over a background scrim",
                    "Headline (optional)": "A dialog\u2019s purpose should be communicated by its headline and buttons or actionable items.\n\nHeadlines should:\n\n- Contain a brief and clear statement or question\n- Avoid apologies (Sorry for the interruption), extra alarm (Warning!), or ambiguity (Are you sure?)\n\n![Dialog title asking \u201cUse location service?\u201d]\n\n![Dialog title asking \u201cAre you sure?\u201d]\n\n \n\nHeadlines should always be succinct. They can wrap to a second line if necessary, and be truncated.\n\nIn full-screen dialogs, long headlines or headlines of variable lengths (such as translations), can be placed in the content area instead of the app bar.\n\n![Example full-screen dialog with long headline]\n\nexclamationCaution\n\nAvoid placing long headlines in a full-screen dialog\u2019s top app bar (1), as the truncated text may lead to misunderstanding\n\n![Example full-screen dialog with short headline]",
                    "Buttons": "Dialog actions are most often represented as buttons and allow users to confirm, dismiss, or acknowledge something.\n\nConfirming actions are aligned to the ending side of the screen with dismissive actions on the leading side of the confirming action. For layouts using left-to-right languages, this means the confirming action is placed on the right, with the dismissing action to its left. This placement is reversed for right-to-left languages.\n\n![Dialog with the confirmation button disabled because a required radio selection is missing.]\n\n![Dialog with the dismissing action \"Cancel\" on the right of the 2 buttons.]\n\n \n\n![Example of single-action button]\n\n![Example of 2 button choices]\n\n \n\nDialogs should contain a maximum of two actions.\n\n- If a single action is provided, it must be an acknowledgement action\n- If two actions are provided, one must be a confirming action, and the other a dismissing action\n\n![Example of 2 buttons side-by-side]\n\n![Example of 2 stacked buttons]\n\nexclamationCautionStacked buttons accommodate longer button text but take up more room. Confirming actions appear above dismissive actions.\n\n \n\nProviding a third action, such as \u201cLearn more,\u201d is not recommended as it navigates the user away from the dialog, leaving the dialog task unfinished.\n\nRather than adding a third action, an inline expansion can display more information. If more extensive information is needed, provide it prior to entering the dialog.\n\n![Example of dialog with 3 text buttons]\n\nexclamationCaution\n\nThe \u201cLearn more\u201d action (1) navigates away from this dialog, potentially leaving it in an indeterminate state"
                },
                "Basic dialog": {
                    "general": {},
                    "soft": "Basic dialogs interrupt users with urgent information, details, or actions. Common use cases for basic dialogs include alerts, quick selection, and confirmation. \n\n \n\n![Example of basic dialog action request]\n\nBasic dialogs require the user to take action before it will close\n\n![Example of basic dialog confirmation]\n\nBasic dialogs can give users the ability to provide confirmation of a choice before committing to it\n\n \n\nBasic dialogs often appear as alerts or lists, but may also use a variety of layouts and component combinations, including lists, date pickers, and time pickers.\n\n![Date picker dialog]\n\nDate picker dialogs allow users to tap a date, then confirm it by tapping \u201cOK\u201d\n\n![Time picker dialog]\n\nTime picker dialogs allow users to move the clock hand and then confirm by tapping \u201cOK\u201d"
                },
                "Full-screen dialog": {
                    "general": {},
                    "soft": "Full-screen dialogs fill the entire screen, containing actions that require a series of tasks to complete. One example is creating a calendar entry with the event title, date, location, and time.\n\nBecause they take up the entire screen, full-screen dialogs are the only dialogs over which other dialogs can appear.\n\nUse a [container transform] pattern to transition a FAB into a full-screen dialog.\n\n\n\nFull-screen dialogs contain actions that require a series of tasks to complete\n\n \n\nWhen a full-screen dialog is closed without being saved, a basic dialog appears in front of it to confirm selections should be discarded without saving changes.\n\n\n\nA basic modal dialog appears when a full-screen dialog is closed without being saved\n\n \n\nFull-screen dialogs may be used for content or tasks that meet any of these criteria:\n\n- Dialogs that include components which require keyboard input, such as form fields\n- When changes aren\u2019t saved instantly\n- When components within the dialog open additional dialogs\n\nFull-screen dialogs are for compact [window sizes] only, like mobile devices. For medium and expanded window sizes, use a basic dialog.",
                    "**Saving selections**": "To save a selection in a full-screen dialog, the user taps \u201cSave.\u201d To discard all changes and exit, the user taps the \u201cX\u201d icon or \u201cBack\u201d button.",
                    "**Confirmation**": "The confirmation action is disabled until all mandatory fields are filled. Use descriptive verbs such as \u201cSave,\u201d \u201cSend,\u201d \u201cShare,\u201d \u201cUpdate,\u201d or \u201cCreate.\u201d Don\u2019t use vague terms such as \u201cDone,\u201d \u201cOK\u201d or \u201cClose.\u201d\n\nIf no changes have been made, the dialog closes and no discard confirmation is required\n\nIf the user has made changes, the user is prompted to confirm the discard action.\n\n![Example of full-screen dialog with close button]",
                    "**Dialog windows**": "Launching a full-screen dialog temporarily resets the app\u2019s perceived elevation, allowing simple menus or dialogs to appear above the full-screen dialog. They cover the screen and don\u2019t appear as a floating modal window.",
                    "**Navigation**": "Because full-screen dialogs can only be completed, dismissed, or closed, the close \u201cX\u201d icon button should be the only navigation option in the top app bar."
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "Dialogs can swap types as the [window size class] changes. For example, a full-screen dialog can change into a basic dialog at larger breakpoints.\n\n \n\n![Example of full-screen dialog on left, simple dialog on right.]\n\nFull-screen dialog on mobileDialog on a tablet",
                    "Medium window size": "Basic dialogs appear in a center position by default, but their position can be overridden to provide a more ergonomic experience.\n\n![Basic dialog on tablet photos app]\n\nDialog custom positioned on the right side of the screen",
                    "Expanded window size": "Dialogs on expanded window sizes, like desktop, are modal windows above a scrim. This puts the dialog at the forefront of the user's view, calling attention to the action prompted in the dialog.\n\n![Example of desktop dialog]\n\nDesktop dialogs call attention to the required action\n\n \n\nBasic dialogs can be custom-positioned anywhere on larger screens, respecting margins to prevent edge collision.\n\n![Basic dialog position diagram]\n\nCustom placement area for basic dialogs that respects a 56dp margin from the edges of the screen"
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "Appearing": "Dialogs appear without warning, requiring users to stop their current task. They should be used sparingly, as not every choice or setting warrants interruption.\n\nDialogs use an [enter and exit] transition pattern to appear on screen.\n\n\n\nA dialog appears with an enter and exit transition",
                    "Position": "Dialogs retain focus until dismissed or an action has been taken, such as choosing a setting. They shouldn\u2019t be obscured by other elements or appear partially on screen, with the exception of full-screen dialogs.\n\n![A basic dialog covering a full-screen dialog.]\n\nDialogs shouldn\u2019t be obscured by other elements except for full-screen dialogs"
                }
            }
        }
    },
    {
        "component_type": "divider",
        "description": "A thin line that groups content in lists and layouts. [Learn more about dividers](https://m3.material.io/m3/pages/divider/overview)",
        "guidelines": {
            "docs_path": "divider_guidelines.md",
            "hard": {
                "do": [
                    "Full width dividers#None#Use full-width divider lines to separate interactive and non-interactive areas of a container such as a card",
                    "Inset dividers#None#Use a combination of inset and full width dividers to reflect the hierarchy of information",
                    "Inset dividers#None#Content may not require a divider line"
                ],
                "dont": []
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Dividers are one way to visually group components and create hierarchy. They can also be used to imply nested parent/child relationships.\n\nThere are two types of dividers: \n\n1. Full width\n\n2. Inset \n\n   \n\n![img]\n\nFull width divider\n\n![img]\n\nInset divider"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "A divider is a simple line.\n\n \n\n![img]\n\nDivider"
                },
                "Full width dividers": {
                    "general": {},
                    "soft": "Use full width dividers to separate larger sections of unrelated content. They can be used directly on a surface or inside other components like cards or lists.\n\nFull width dividers can also separate interactive areas from non-interactive areas. \n\nThey are used to group visual elements together, and indicate when elements are related to each other from an interaction perspective. \n\n\n\n![img]\n\nFull width dividers to indicate separation of content\n\n \n\n![img]\n\n![img]\n\nexclamationCautionUse full-width dividers sparingly. Too many divider lines will make an interface look cluttered."
                },
                "Inset dividers": {
                    "general": {},
                    "soft": "Use inset dividers to separate related content within a section.\n\nInset dividers are equally indented from both sides of the screen by default.\n\n![img]\n\nInset dividers separate related content, such as emails in a list. They should be used with anchoring elements such as icons or avatars, and align with the leading edge of the screen.\n\n \n\n![img]\n\nInset dividers in a list of related items\n\n![img]\n\nInset dividers can be placed in the middle of a layout to separate elements such as body text from selection chips"
                }
            }
        }
    },
    {
        "component_type": "extended fab",
        "description": "A component for helping people take primary actions. They're wider than FABs to accommodate a text label and larger target area. [Learn more about extended FABs](https://m3.material.io/m3/pages/extended-fab/overview/)",
        "guidelines": {
            "docs_path": "extended-fab_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#If a primary action is needed in a non-scrolling view, use a button instead",
                    "Usage#None#If multiple affordances are necessary, use a small FAB for one of the actions",
                    "Usage#None#Use a regular button (styled with emphasis in mind) to present optionality",
                    "Anatomy#Icon#Unlike standard FABs, extended FABs don't require an icon",
                    "Placement#None#Place the extended FAB above the rest of the UI, off of elements like app bars"
                ],
                "dont": [
                    "Usage#None#Don\u2019t use an extended FAB in a non-scrolling view",
                    "Usage#None#Don\u2019t use multiple extended FABs in one screen as it disrupts visual hierarchy",
                    "Usage#None#Don\u2019t use the extended FAB to convey an option in a set of actions",
                    "Anatomy#Icon#An extended FAB can't have an icon without a text label",
                    "Anatomy#Label text#Avoid wrapping text",
                    "Placement#None#Don\u2019t place the extended FAB in the upper half of a mobile screen, as it disrupts the reading of the UI",
                    "Placement#None#Don\u2019t place extended FABs on cards or inside other containers",
                    "Placement#None#Don\u2019t overlay the FAB on app bars as it disrupts the consistency of the elevation and surface layers"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Use an extended FAB on screens with long, scrolling views that require persistent access to an action, such as a check-out screen. Do not use an extended FAB in a view that cannot scroll.\n\n![Example of extended FAB used for Checkout.]\n\nExtended FAB displaying a main action\n\n \n\n![Extended FAB placed on lower right of a screen, above bottom navigation.]\n\nUse an extended FAB to provide persistent access to a primary action above long-scrolling surface content\n\n![Extended FAB placed on lower right screen, above bottom navigation.]\n\nUse an extended FAB to provide persistent access to the screen's primary action\n\n \n\n![Extended FAB on a non-scrolling landing page.]\n\n![Filled button on a non-scrolling landing page.]"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Diagram of 3 extended FAB elements]\n\nContainerLabel textIcon",
                    "Container": "Extended FAB containers have a rounded rectangle shape.\n\nThe width of an extended FAB\u2019s container can be fixed or fluid.\n\nA fixed-width container is defined by the cumulative width of the icon, text label, and padding.\n\n![Fixed-width extended FAB, centered, ignoring layout grid.]\n\nThis extended FAB's fixed width is defined by the cumulative width of the icon, text label, and container padding\n\n \n\nA fluid-width container is defined by its relationship to the dimensions of the screen, such as screen width or layout grid.\n\n![Fluid-width extended FAB aligning with layout grid.]\n\nThis extended FAB's container width is defined by the layout grid columns",
                    "Icon": "The icon of an extended FAB should intuitively represent its action.\n\n![Extended FAB in a left-to-right language placed at the bottom right of a screen. The icon is to the left of the text.]\n\nIcons should be placed to the left of text labels for left-to-right (LTR) languages\n\n![Extended FAB in a right-to-left language placed at the bottom left of a screen. The icon is to the right of the text.]\n\nIcons should be placed to the right for right-to-left (RTL) languages\n\n \n\n![Extended FAB without an icon, labelled \u201cSave draft\u201d.]\n\n![Extended FAB with icon only.]",
                    "Label text": "The label of an extended FAB should describe its action.\n\n\n\n![Extended FAB with truncated text.]\n\nexclamationCaution\n\nOnly truncate text if shorter text isn't an option\n\n![Extended FAB with wrapped text.]"
                },
                "Placement": {
                    "general": {},
                    "soft": "![Extended FAB placed in upper left of a mobile screen.]\n\n![Extended FAB within a dialog.]\n\n \n\n![Extended FAB overlapping a bottom app bar.]\n\n![Extended FAB placed above a navigation bar.]"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "If space becomes limited, the extended FAB can transform into a standard FAB. \n\nFor example, this can happen if a window is resized from the expanded [window size] to a compact or medium window size class, or if a navigation drawer opens up.\n\n![Extended FAB transforming into a standard FAB.]\n\nWhen space is limited, an extended FAB transforms into a standard FAB",
                    "Compact & medium": "In a compact or medium window size, the extended FAB should be placed at the bottom of the screen, either center-aligned or aligned to the ending edge of the screen (right-aligned for RTL languages and left-aligned for LTR languages).\n\n\n\n![Extended FAB center-aligned on a mobile screen.]\n\nIn smaller windows, the extended FAB can be center-aligned\n\n![Extended FAB right-aligned on a mobile screen.]\n\nIn smaller windows, the extended FAB can be right-aligned for RTL languages or left-aligned for LTR languages\n\n \n\n![Extended FAB above bottom app bar.]\n\nexclamationCautionAvoid using an extended FAB above a bottom app bar, as the combination takes up a lot of screen space. If they are paired, the extended FAB should collapse on scroll.",
                    "Expanded": "In an expanded window size, the extended FAB should appear at the bottom right of the screen, or within the navigation drawer.\n\n\n\n![Extended FAB at bottom right of screen.]\n\nIn larger windows, extended FABs can be right-aligned in both LTR and RTL languages\n\n![Extended FAB in navigation drawer.]\n\nIn larger windows, extended FABs can be at the top of a navigation drawer"
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "Appearing": "The extended FAB surface expands when appearing on screen using an [enter and exit] transition pattern\n\n\n\nAn extended FAB can expand and adapt to any shape",
                    "Expanding": "The extended FAB can expand and adapt to any shape using a [container transform] transition pattern. This includes a surface that is part of the app structure, or a surface that spans the entire screen.\n\n\n\nAn extended FAB can expand and adapt to any shape",
                    "Transforming": "The extended FAB collapses on scroll and expands on reaching the bottom of the view\n\n\n\n\n\nAn extended FAB collapses and expands while scrolling, and expands when reaching the bottom of the page"
                }
            }
        }
    },
    {
        "component_type": "floating action button",
        "description": "A component representing the most important action on a screen. They put key actions within reach. [Learn more about FABs](https://m3.material.io/m3/pages/fab/overview/)",
        "guidelines": {
            "docs_path": "floating-action-button_guidelines.md",
            "hard": {
                "do": [
                    "Anatomy#Container#Ensure the FAB container color contrasts with the area behind it",
                    "Anatomy#Icon#Use clear and simple icons, such as Add, Message, or Edit. Ensure that a tooltip is available for clarity.",
                    "FAB#None#Represent the most common primary action with a FAB, such as drafting a new email",
                    "FAB#None#FABs are not needed on every screen, such as when images represent primary actions",
                    "Small FAB#None#If multiple important actions are necessary, use a small FAB for one of the actions",
                    "Large FAB#None#Consider a large FAB when there is a clear action to take as part of a user\u2019s flow",
                    "Responsive layout#Expanded window size#Place the FAB in the upper left corner for large screens",
                    "Responsive layout#Expanded window size#A FAB can be used within a navigation component, such as a navigation rail or navigation drawer",
                    "Behavior#Actions#Use FABs for primary, positive actions"
                ],
                "dont": [
                    "Anatomy#Container#Don't layer badges or other elements in front of a FAB",
                    "Anatomy#Icon#Don\u2019t use confusing or open-ended icons to symbolize less common actions like Gesture, Storm, or Local Florist",
                    "FAB#None#Don't display multiple FABs on a single screen. Instead, consider using a menu or, in rare cases, pairing a small FAB with a default FAB.",
                    "Small FAB#None#Don\u2019t use multiple extended FABs on one screen as it disrupts visual hierarchy",
                    "Large FAB#None#Don\u2019t use a large FAB if its bigger size obscures important information on the screen. Instead, use a FAB.",
                    "Responsive layout#Expanded window size#Individual components, such as cards, cannot each have their own FAB",
                    "Behavior#Actions#Do not use FABs for minor, overflow, unclear, or destructive actions"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Use a FAB for the most important action on a screen. The FAB appears in front of all other content on screen, and is recognizable for its rounded shape and icon in the center.\n\nOnly use a FAB for presenting a screen's primary action.\n\nThe FAB can be aligned left, center, or right. It can be positioned above the navigation bar, or nested within the bar.\n\n\n\n![A FAB on the right side of a mobile screen above the navigation bar.]\n\nLarge FAB using dynamic color\n\n \n\nThere are 3 sizes of FAB:\n\n1. FAB\n2. Small FAB\n3. Large FAB\n\n![Three sizes of the FAB.]\n\nFAB Small FAB Large FAB"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![A FAB container with an icon on it.]\n\nContainerIcon",
                    "Container": "The FAB is typically displayed in a rounded square container. The product color scheme determines the FAB container color, which should contrast with the area behind the FAB.\n\n\n\n![A FAB container and background have a high-contrast ratio.]\n\nA FAB container color needs to stand out from its background\n\n \n\n![Example of badge overlay]\n\n![Example of FAB color]",
                    "Icon": "An icon in a FAB should be clear and understandable. On hover, FABs should display a tooltip with an accompanying icon text label.\n\nA FAB shouldn't contain notifications or actions found elsewhere on a screen.\n\n\n\n![4 FABs with examples of clear icons]\n\n![4 FABs with examples of ambiguous icons]"
                },
                "FAB": {
                    "general": {},
                    "soft": "Use a FAB to represent the screen\u2019s primary action.\n\n![Example of FAB on contrasting dark background]\n\nA FAB should present a screen\u2019s primary action\n\n \n\n![A FAB with a compose icon, representing the screen\u2019s primary action.]\n\n![A photo feed without a FAB.]\n\n![A screen with 3 FABs makes it hard to tell what the primary action should be.]"
                },
                "Small FAB": {
                    "general": {},
                    "soft": "A small FAB is used for a secondary, supporting action, or in place of a default FAB on compact [window sizes].\n\nOne or more small FABs can be paired with a default FAB or extended FAB.\n\n\n\n![A small FAB with a location icon is above a large FAB for starting navigation.]\n\n![A large FAB for location is above a large FAB for starting navigation.]"
                },
                "Large FAB": {
                    "general": {},
                    "soft": "A large FAB is useful when the layout calls for a clear and prominent primary action, and where a larger footprint would help the user engage. For example, when appearing in a medium window size.\n\n![Large FAB for the primary action: creating a new item. The FAB doesn't obscure content on screen.]\n\n![Large edit FAB obscuring icons on screen.]"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "",
                    "Expanded window size": "A consistent position for FABs improves discoverability as it appears across a responsive range of layouts. For large screens in the expanded [window size class], it\u2019s recommended to place the FAB in the upper left region.\n\n\n\n![Large screen layout showing FAB in upper left region of the screen, below navigation drawer icon.]\n\n \n\n![Large screen layout showing FAB in upper left region of the screen, below navigation drawer icon.]\n\n![A busy screen layout with 8 cards, each with their own FAB.]"
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "Appearing": "When a FAB animates on screen, it expands outward from a central point. The icon within it may be animated as well.\n\nWhile FABs should be relevant to screen content, they aren't attached to the surface on which content appears. FABs move separately from other UI elements because of their relative importance.#### Screen transitions\nFABs can morph to launch related actions. When a screen changes its layout, the FAB should disappear and reappear during the transition.\n#### Reappearance\nThe FAB should only reappear if it's relevant to the new screen. It should reappear in the same position, if possible.\n\n\n\n\n\nFAB animating on screen\n",
                    "Expanding": "The FAB can expand and adapt to any shape, including a surface that is part of the app structure, or a surface that spans the entire screen.\n\n\n\n\n\nFABs can expand and adapt to any shape",
                    "Actions": "A FAB can trigger an action either on the current screen, or it can perform an action that creates a new screen.\n\nA FAB promotes an important, constructive action such as:\n\n- Create\n- Favorite\n- Share\n- Start a process\n\n\n\n![FABS for 12 common actions including, create, edit, and navigate.]\n\n \n\nAvoid using a FAB for minor or destructive actions, such as:\n\n- Archive or trash\n- Alerts or errors\n- Limited tasks like cutting text\n- Controls better suited to a toolbar (like controls to adjust volume or font color)\n\n\n\n![FABs for 18 minor or destructive actions, such as cut, trash, and volume.]",
                    "Scrolling": "FABs remain in place on scroll.\n\nExtended FABs can collapse into a FAB on scroll and expand on reaching the bottom of the view.\n\n\n\n\n\nFABs stay in place above a scrolling background"
                }
            }
        }
    },
    {
        "component_type": "icon buttons",
        "description": "",
        "guidelines": {
            "docs_path": "icon-buttons_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#Use contained icon buttons in cases that require more visual separation or hierarchy",
                    "Behavior#Selection#Do use toggle icon buttons when the icon can be selected. For example, here a contained icon button can be toggled to star a song. "
                ],
                "dont": [
                    "Usage#None#Avoid using contained icon butttons alongside filled or outlined buttons as it doesn\u2019t create enough hierachy in actions",
                    "Behavior#Selection#Don\u2019t use toggle icon buttons for actions that don\u2019t have a selected state, such as an icon button for an overflow menu"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Use icon buttons to display actions in a compact layout. Icon buttons can represent opening actions such as opening an overflow menu or search, or represent binary actions that can be toggled on and off, such as **favorite** or **bookmark**.\n\nIcon buttons can be grouped together or they can stand alone.\n\n![Mobile UI of message feed with several icon buttons]\n\nIcon buttons can be used within other components, such as a bottom app bar\n\n \n\nThere are two types of icon buttons:\n\n1. Standard icon button\n2. Contained icon button\n\n![Side by side view of standard and contained icon buttons]\n\nBoth standard icon buttons (1) and contained icon buttons (2) can be toggled \u2013 displaying a selected or unselected state\n\n \n\nUse a contained icon button when the component requires more visual separation from the background.\n\nBoth types of icon buttons share the same functionality, so which one you use can depend on style alone.\n\n![Card component with contained icon button over image]\n\n![Mobile UI of restaurant results with filled icon buttons next to filled buttons]\n\n \n\nContained icon buttons can have one of three styles:\n\n- Filled\n- Filled tonal\n- Outlined\n\n\n\n**Filled icon buttons** have higher visual impact and are best for high emphasis actions.\n\n![Example of two icon buttons set on bottom screen]\n\nUse filled icon buttons for high emphasis actions, such as turning off a microphone or camera\n\n \n\n**Filled tonal icon buttons** are a middle ground between filled and outlined icon buttons. They\u2019re useful in contexts where the button requires slightly more emphasis than an outline would give, such as a secondary action paired with a high emphasis action.\n\n![Side by side examples of three different icon buttons]\n\nUse a toggle icon button for actions like Raise hand in a video meeting. When selected, its visual emphasis is greater than the medium-emphasis outlined button for the Overflow menu, but less than the high-emphasis filled button for End call.\n\n \n\n**Outlined icon buttons** are medium-emphasis buttons. They\u2019re useful when an icon button needs more emphasis than a standard icon button but less than a filled or filled tonal icon button. \n\n![img]\n\nUse outlined icon buttons in cases that require a more emphasis than a standard icon button, but less than a filled or tonal icon button. Here, outlined icon buttons indicate that more content is available."
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Diagram of standard and filled icon buttons indicating the 2 parts of its anatomy]\n\nIconContainer (visible in contained icon buttons only)",
                    "Icon": "Icons visually communicate the button\u2019s action. Their meaning should be clear and unambiguous.\n\n![UI of restaurants list with heart icon to add to favorites]\n\nEnsure that the meaning of the icon is clear, such as a heart indicating \u201cAdd to favorites\u201d",
                    "Container": "The container holds the icon and is visible for contained icon buttons only. \n\nIt provides increased contrast and hierarchy in places that need more visual separation from the background or other elements. \n\n![Video call UI with filled icon button controls on video image ]\n\nThe container of contained icon buttons provides visual separation from the image background"
                },
                "Placement": {
                    "general": {},
                    "soft": "Icon buttons are best suited for areas where a compact layout is needed, such as a toolbar.\n\n![Spreadsheet UI with many icon buttons in toolbar]\n\nIn denser UIs, icon buttons allow for many actions in a compact layout\n\n \n\nIcon buttons are commonly found within top app bars and cards. \n\n![Restaurant listing UI with icon buttons in top app bar]\n\nTop app bars often contain icon buttons"
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "Hover": "On hover, the icon button displays a tooltip describing its action, rather than the name of the icon itself.\n\n\n\nThe tooltip label text should be clear and concise",
                    "Selection": "Toggle icon buttons allow a single choice to be selected or deselected, such as adding or removing something from favorites."
                }
            }
        }
    },
    {
        "component_type": "lists",
        "description": "A component comprised of continuous, vertical indexes of text or images. [Learn more about lists](https://m3.material.io/m3/pages/lists/overview)",
        "guidelines": {
            "docs_path": "lists_guidelines.md",
            "hard": {
                "do": [
                    "Anatomy#Leading media or avatar#Improve scannability by anchoring supporting visuals, such as thumbnails, aligned to the row's leading edge",
                    "Anatomy#Dividers#Place a divider between rows with lots of content, such as those with two- or three-line lists",
                    "Responsive layout#Line length#Adjust margins to create a more comfortable line length for reading",
                    "Responsive layout#Line length#A multi-column layout can help break up content when needed"
                ],
                "dont": [
                    "Responsive layout#Line length#Don\u2019t scale components without adjusting other affected areas of the screen, such as text length. This can result in line lengths that make reading difficult."
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Lists are vertically organized groups of text and images. \n \nOptimized for reading comprehension, a list consists of a single continuous column of rows, with each row representing a list item.\n \nList items can contain primary and supplemental actions represented by icons and text.\n\n![Three two-line list items]\n\nThree list items with an avatar, headline, supporting text, and trailing text\n\n \n\nUse lists for communicating or selecting discreet items, such as choosing from a set of colors.\n\n![List of items with checkboxes. One checkbox is activated, indicating a choice selection.]\n\nAn image and text list made of list items that contain color swatches, color names, and a checkbox action\n\n \n\nA list should be easily scannable, and any element of a list can be used to anchor and align list item content. Scannability is improved when elements (such as supporting visual and primary text) are placed in consistent locations across list items.\n\n![Comparison of 4 lists with different elements highlighted]\n\nSample listContent placement in a rowSupporting visuals are aligned for easy scanningPrimary text is aligned for easy scanning\n\n \n\nList items come in three sizes:\n \n\n1. One-line\n\nSingle-line list items contain a maximum of one line of text.\n \n\n2. Two-line\n\nTwo-line list items contain a maximum of two lines of text.\n \n\n3. Three-line\n\nThree-line list items contain a maximum of three lines of text.\n\n![Comparison of one-line, two-line, and three-line list items]\n\nThree sizes of list items"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Diagram with 11 elements that can be included in lists]\n\nContainer Headline Supporting text Trailing supporting text Trailing icon (or icon button) Trailing selection control (checkbox, radio button, handle, etc) Divider (optional) Leading avatar containerLeading avatar label text Leading icon Leading media (image or video)",
                    "Container": "List containers hold all list items and their elements. List item size is determined by the \"tallest\" element within the list item. See Specs for layout measurements.\n\n![Diagram of list container anatomy]\n\nList container",
                    "Headline and supporting text": "Headline text often communicates the subject of the list item, such as the name of a photo album or article.\n\nSupporting text includes body content, such as an article summary or a restaurant description.\n\n![Diagram of list headline and supporting text anatomy]\n\nHeadline and supporting text",
                    "Icons": "**Leading icon**\nList items can include leading icons.\n**\nTrailing icon**\nList items can include trailing icons.\n\n![Diagram of list items with leading icons]\n\nExample of leading icons in list items\n\n![Diagram of list items with trailing icons]\n\nExample of trailing icons in list items",
                    "Leading media or avatar": "List items can contain an image, video, or avatar. Anchor visuals to the leading edge of the list to ensure scannability.\n\n**Image**\nList items can include photos, illustrations, and other graphics.\n\n**Video**\nList items can include photos, illustrations, and other graphics, such as weather icons.\n\n![Leading thumbnail images improve scannability]\n\n![A list of items with thumbnail images in the center of the each row]\n\nexclamationCaution\n\nPlacing supporting visuals in the center of the row can make it difficult to see the relationship between primary content and supporting content\n\n \n\n**Avatar**\nList items can include images in a circular crop to represent a person or entity,\n\n![A list of names with leading photographs ]",
                    "Trailing supporting text": "Trailing supporting text can be used in addition to inline supporting text to communicate meta-information about the list item, such as price, content count, or other details.\n\n![Diagram of two-line list item with trailing supporting text]\n\nExample of trailing supporting text",
                    "Selection controls": "Controls display information and actions for list items. They can be aligned to the leading or trailing edge of the list item.\n\n**Checkbox\n**Checkboxes can be used to select one or more list items.\n\n**Switch\n**Switches can be used to toggle a control on or off.\n\n**Handle\n**Usually appearing in edit mode, handles allow you to drag list items, moving them to other locations within the list. This reorder icon is the list item's secondary action.\n\n![Comparison of lists with different trailing elements]\n\nList items with: \n\n1. Checkboxes \n2. Switches \n3. Handles",
                    "Dividers": "[Dividers] can be used to separate larger list items. \n\n![2 dividers visually separate 3 list items]\n\n![A list of one-line items separated by dividers]\n\nexclamationCaution\n\nDistinguish rows by maintaining sufficient space between list items"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "",
                    "Spacing": "Use spacing to draw attention to the most important aspect of the list item, usually the primary action area or key content.\n\n![Diagram of list item with two action areas]\n\nThe primary action takes up the majority of space.\n\n1. Primary Action area\n2. Secondary Action area\n\n![Diagram of list item with leading avatar and trailing supporting text]\n\nClear hierarchy is created by aligning the most distinguishing content on the left, with the least distinguishing on the right.\n\n1. More distinguishing content\n2. Less distinguishing content",
                    "Line length": "Avoid excessively long lines of text when expanding containers and text-heavy components  within fluid layouts. This often means changing margins and typography properties as the container scales.\n\n![List of items with wrapped supporting text]\n\n \n\nThe ideal line length for text is typically between 40-60 characters, but large screen devices can accommodate up to 120 characters per line. Consider increasing the line height to improve readability if a line of text becomes close to 120 characters in length.\n\n \n\n![List items with with long lines of supporting text]\n\n \n\nAdapt the width of the list container based on a line\u2019s length, or by switching to a multi-column layout.\n\n \n\n![2 column list]\n\n \n\nA three-line list in a compact [window size], like mobile (1), is displayed as a two-line list on an expanded window size, like desktop (2).\n\n \n\n![Comparison of app screen with one column list and web screen with two column list]\n\nA multi-column layout can help break up content when needed",
                    "Component adaptation": "Visual presentation is the most common method of adaptation, affecting the scale and placement of content and objects on a screen, as well as their relationships to each other.\n\nFor example, a text list on mobile can adjust its margins, vertical spacing, or density to better fit large screens like tablets.\n\n![Comparison of app screen list with small leading images and web screen list with large leading images and supportive text]",
                    "Component swapping": "Given the flexibility needed for lists and cards to support multiple types of content, use caution if swapping between the two on large screens. As window sizes increase, there are new opportunities for text and image compositions; in medium and expanded window sizes, you can use more space for images and text.\n\n![Comparison of app screen list with small leading images and web image list with large images and supportive text. Two different formats and screens support the same information.]\n\nInformation displayed in list items on mobile and in cards on tablet and desktop",
                    "Compact window size": "On compact window sizes like mobile, lists extend edge-to-edge. Users navigate between full-screen views, as seen in a photo app\u2019s transition from a thumbnail list to full image view.\n\n\n\nOn small screens, users navigate between full-screen views",
                    "Medium and expanded window sizes": "Medium and expanded window sizes, like tablet and desktop screens, can display primary and secondary content in the same view. For example, having a list adjacent to a detail view.\n\n![Web screen with 2 columns, one for a list and the other for a detail view]\n\nOn larger screens, a list/detail view can be more appropriate\n\n \n\nOn a larger window size, a list may transform into an image list.\n\n![Comparison of list with leading images on mobile and image list on desktop]\n\nA one-line list on mobileAn image list on desktop\n\n \n\nLists can also show more or less content as they scale up and down in size. For example, a list item can reveal more content when the component expands.\n\n![Comparison of small-screen list without supporting text and large-screen list with supporting text]\n\n1. List items in a compact window size\n2. List items on medium window size\n\nList items on larger screens (2) can display more information as the screen size transitions from compact to medium window size breakpoints."
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "Expanding and collapsing": "Tapping a list item expands it vertically across the entire screen using a container transform transition pattern.\n\n![List item with dropdown menu]\n\nTo expand a list item, display a parent-child transition",
                    "Swiping": "Swiping a list item (either left or right) can perform an action.\n\n\n\nTo archive a list item, swipe it"
                }
            }
        }
    },
    {
        "component_type": "menus",
        "description": "A component that displays a list of choices on a temporary surface. [Learn more about menus](https://m3.material.io/m3/pages/menus/overview)",
        "guidelines": {
            "docs_path": "menus_guidelines.md",
            "hard": {
                "do": [],
                "dont": []
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Use a menu to display a list of choices on a temporary surface, such as a set of overflow actions in a top app bar. \n\nMenus allow users to make a selection from multiple options. They\u2019re less prominent and take up less space than a set of radio buttons or choice chips.\n\nA menu opens upon interaction with an element (such as an icon, button, or input field) or when users perform a specific action.\n\n![List of 4 options in a menu]\n\nMenus display a list of choices on a temporary surface\n\n \n\nMenus appear in front of all other permanent UI elements.\n\n![Menu appearing from FAB on top of UI]\n\nMenus appear in front of all other permanent UI elements\n\n \n\nMenus are positioned relative to the edge of the screen or browser. They typically appear below, next to (or in front of) the element that generates them. If they are in a position to be cut off by the browser or screen\u2019s edge, the menu can instead appear to the left, right, or above the element that generates it.\n\n![UI showing a parent dropdown menu with a cascading menu to its right]\n\nMenus can change their position to avoid being truncated by the screen or browser\u2019s edge\n\n \n\nA menu\u2019s height should be at least one row less than the app\u2019s UI.\n\n![UI showing 48 dp for each menu row and another 48 dp padding between menu and bottom of screen]\n\nThe space between the bottom of the menu and the bottom of the screen is the same size as the height of a menu item"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Menu displaying a list of text and icon items]\n\nContainerList item (including label text and optional leading icon, trailing icon, and keyboard command)Divider (optional)",
                    "Container": "Menu containers hold all menu items.",
                    "List items": "Menus display lists of options. List items can include label text, leading icons, trailing icons, and keyboard commands.\n\nList items have interaction states including hover, focus, and press.\n\nDisplay list items as disabled when they can only be used sometimes, under certain conditions. They should be displayed as disabled rather than removed.\n\n![Menu shows 3 items that are disabled, the text color of disabled items are lighter than the active items]\n\nThe Redo action is disabled when that action isn\u2019t available, and the Cut and Copy actions are disabled until content is selected",
                    "Divider": "[Dividers] can be used to separate list items into groups.\n\n![Dropdown menu displaying a list of text and icon items with 1 divider]\n\nSeparate list items into groups using dividers"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "",
                    "Compact window size": "Bottom sheets are an alternative to menus on compact [window sizes], like mobile devices. They have more space to display additional items and longer labels.\n\n![Menu of actions (in a list) inside a modal bottom sheet]\n\nThe bottom sheet can replace an inline menu on smaller screens",
                    "Medium & expanded window sizes": "On larger screens, bottom sheets can become menus in order to preserve the intent and context of the primary content.\n\n![An adapted bottom sheet becomes a context menu]\n\nOn larger screens, a menu can be more appropriate"
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "Appearing": "A menu appears when a user taps either an interactive element (such as an icon, button, or action) or content (such as selected items or text).\n\nA menu\u2019s position on screen affects where and how it will appear. If opened at the top of the screen, it will expand downwards (to avoid being cropped).\n\nMenus use a fade transition pattern to enter and exit the screen. The animation creates a relationship between the menu and the interactive element that generates the menu.\n\n\n\nMenus at different positions on screen open in different ways, adapting to the space available\n\n \n\n![Menu appears below overflow menu icon]\n\nA menu can be triggered by an icon tap, appearing below the overflow menu icon\n\n![Diagram of a menu appearing on tap-and-hold, after selecting text]\n\nA menu can be triggered by a tap-and-hold, appearing next to selected text\n\n \n\n![Menu displays current selection]\n\nA menu can be triggered by selecting an input field in a document, appearing directly beneath that input field\n\n![Menu displays the currently selected item above the menu]\n\nA menu can be triggered by selecting a filter chip, appearing directly beneath that chip\n\n \n\nBy default, menus open with an entrance animation. However, on desktop, menus can skip the animation and open instantly instead.\n\n![ Menu displays the currently selected item]\n\nDesktop menus have the option to open instantly\n\n \n\nWhen a menu expands, the following transitions occur:\n\n- A menu list fades in and has a slight downward motion\n- Stroke width of the separation line thickens, and its color changes to blue from grey\n- The text label scales down in size and moves upwards\n- A downward arrow fades out, and an upward arrow fades in\n\n\n\nWhen an item on the menu list is selected, the following transitions occur:\n\n- Ripple appears on touch\n- Selected Text fades into the input field\n- Menu list fades out\n- Upward arrow fades out, and downward arrow fades in\n\n\n\nMenu with filter showing a list of states filtered by the letter C",
                    "Filtering": "A menu with filtering is also known as **autocomplete** or a **combobox**. As the user begins typing, menu options filter based on what's entered. This can help users quickly find the right option from a large list. \n\nMenus with filtering apply dynamic easing to the movement of suggestions as the menu changes height.\n\n![Menu transitioning list with filter]\n\nMenu with filter showing a list of states filtered by the letter C",
                    "Scrolling": "If not all menu items are displayed at once, menus can be scrollable. In this state, menus show a persistent scrollbar.\n\n![Menu displays the currently selected font above the menu]\n\nWhen content is scrollable, menus display scrollbars"
                }
            }
        }
    },
    {
        "component_type": "navigation bar",
        "description": "A component offering a persistent and convenient way to switch between primary destinations in an app. [Learn more about navigation bars](https://m3.material.io/m3/pages/navigation-bar/overview/)",
        "guidelines": {
            "docs_path": "navigation-bar_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#Use a navigation bar for destinations that should remain easy to access throughout a user journey",
                    "Anatomy#Container#A color-filled navigation bar provides separation from content scrolling behind it",
                    "Anatomy#Icons#When filled and outlined icon styles are available, use outlined icons to represent inactive destinations and filled icons for the active destination",
                    "Anatomy#Active indicator#Use the active indicator only for the active destination",
                    "Anatomy#Active indicator#Animate the shape expansion along 1 axis to preserve the sense of a flat, shared plane",
                    "Anatomy#Label text#Use brief text labels to identify the purpose of a destination",
                    "Placement#None#The FAB can be right-aligned above the navigation bar",
                    "Responsive layout#Compact window size#Bottom navigation bar in landscape view with destinations keeping the same spacing as in portrait mode",
                    "Responsive layout#Density#Keep navigation bars the default height"
                ],
                "dont": [
                    "Usage#None#Don\u2019t use more than five destinations. When elements are placed close to each other, translated text length and element collision can cause problems. For more than 5 destinations, consider using tabs or a navigation drawer.",
                    "Usage#None#Avoid using icons without labels",
                    "Usage#None#Don\u2019t use a navigation bar for fewer than three destinations. Instead, use tabs.",
                    "Usage#None#Navigation bar destinations have fixed positions. They don\u2019t scroll or move horizontally.",
                    "Anatomy#Icons#Don\u2019t use multiple or low-contrast colors in a navigation bar, as they make it harder for users to distinguish the active item and navigate to other destinations",
                    "Anatomy#Active indicator#Don\u2019t use the active indicator for more than one destination at a time",
                    "Anatomy#Active indicator#Don\u2019t animate the shape expansion uniformly",
                    "Anatomy#Label text#Don\u2019t wrap or truncate text as it can make the label hard to understand",
                    "Anatomy#Label text#Don\u2019t shrink longer text to fit on a single line",
                    "Placement#None#Don\u2019t indent the FAB off-center of the device width; don\u2019t indent the FAB if there are an odd number of destinations. Instead, center an indented FAB between two or four destinations.",
                    "Responsive layout#Medium and expanded window sizes#Don\u2019t use navigation bars for desktop layouts. Instead, use a navigation rail or tabs.",
                    "Responsive layout#Density#Don\u2019t apply density to navigation bars"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Navigation bars (nav bars) provide access to three to five destinations.\n\nThe nav bar is positioned at the bottom of screens for convenient access. Each destination is represented by an icon and optional text label.\n\nWhen a navigation bar icon is tapped or focused, the user is taken to the navigation destination associated with that icon.\n\n![Navigation bar showing 5 destinations featuring icons and text labels, with 1 active destination]\n\nNavigation bar with 5 destinations\n\n \n\nNavigation bars should be used for:\n\n- Top-level destinations that need to be accessible from anywhere in the app\n- Three to five destinations\n- Compact window size layouts (like mobile or tablet)\n\nNavigation bars shouldn\u2019t be used for:\n\n- Single tasks, such as viewing a single email\n- User preferences or settings\n\n![Navigation bar showing 5 destinations featuring icons and labels, with 1 active destination]\n\nOn mobile or tablet, navigation bars should be used for top-level destinations\n\n \n\n![Navigation bar with 4 destinations with icon and text label, 1 active destination.]\n\n![Navigation bar showing 6 destinations placed too close together]\n\n \n\n![Navigation bar with 4 destinations with only icons, no labels]\n\n![Navigation bar featuring only 2 destinations]\n\n \n\n![App screen with tabs on top and navigation bar on bottom, both with active destinations]\n\nCombining navigation bars and tabs may cause confusion, as their relationship to the content may be unclear. Tabs share a common subject, whereas navigation bar destinations are top-level and disconnected from each other.\n\n \n\n![Navigation bar with scrolling destinations]"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Diagram of 6 elements of navigation bar]\n\nContainerIconLabel textActive indicatorLarge badge (optional)Small badge (optional)",
                    "Container": "Navigation bar containers hold all elements making up a destination, including icon, label text, and active indicator.\n\n![Diagram showing navigation bar container with elements]\n\nThe navigation bar container holds all elements\n\n \n\nThe container is divided into equal-width columns, one for each destination. The width of each destination can be calculated by taking the width of the navigation bar and dividing it by the number of destinations.\n\n![Diagram of container with 4 equal-width columns for destinations]\n\nNavigation bar divided into equal-width columns\n\n \n\nThe container can have a color fill to provide separation from the content behind it.\n\n![Same-color navigation bar and background]\n\nexclamationCaution\n\nIf there\u2019s no conflicting content behind the navigation bar, the navigation bar can be the same color as the background\n\n![Content separated by color-filled navigation bar ]",
                    "Icons": "Destinations in navigation bars always include an icon. It\u2019s best to pair icons with text labels, especially if the icon doesn\u2019t have obvious meaning.\n\nUse a filled icon for the active destination and outlined icons for inactive destinations.\n\n![Outlined icons and filled icons representing destinations]\n\n![Label text shown for all destinations]\n\nexclamationCaution\n\nIf a filled version of an icon is unavailable, the bolded label text and active fill still provide a secondary cue. Try using filled icons when possible.\n\n \n\nActive and inactive icons should have sufficient contrast with the container.\n\n![Navigation bar with 5 destinations, each a different color]",
                    "Active indicator": "The active indicator is a background shape communicating which destination of the navigation bar is currently being displayed.\n\n![Active indicator communicating navigation bar active destination ]\n\n![3 active indicators used for 3 destinations]\n\n \n\nUpon selection of a destination, the active indicator visually expands behind its icon. This transformation is limited to one axis during the shape expansion.",
                    "Label text": "Label text provides short, meaningful descriptions of navigation bar destinations.\n\nThe destination icon and label are centered.\n\nLabel text in navigation bars uses the overline style. Label text should have sufficient contrast with the container.\n\n![Navigation bar showing 4 destinations, with 1 active destination featuring both icon and text label]\n\nLabel text provides short descriptions of destinations\n\n \n\n![Label text label identifying destination purpose.]\n\n![Truncated label text in navigation bar ]\n\n![Navigation bar showing shrunk label text ]",
                    "Badges (optional)": "Icons in navigation bars can display badges in their upper right corners. \n\nBadges can contain dynamic information, such as the number of new messages.\n\n![Navigation bar with with 3 icons, 1 with small round badge]\n\nA small badge uses only shape to indicate a status change or new notification\n\n![Navigation bar with 3 icons, 1 with large badge displaying number in container ]\n\nA large badge displays a number within a container to indicate a quantifiable status change related to a destination"
                },
                "Placement": {
                    "general": {},
                    "soft": "Navigation bars can be paired with a floating action button (FAB).\n\n![Navigation bar with FAB aligned right.]\n\n![Off-centered FAB set between background and navigation bar]\n\n \n\nNavigation bars can be temporarily covered by dialogs, bottom sheets, navigation drawers, the on-screen keyboard, or other elements needed to complete a flow. They should not be permanently obstructed on any screen.\n\n\n\nThe search feature of the \u201cRadio\u201d screen triggers the on-screen keyboard, temporarily covering the bottom navigation bar until the search flow is completed"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "Only use navigation bars in compact and medium [window sizes], like mobile and small tablet interfaces. On expanded window sizes, swap out navigation bars for a component that\u2019s better suited to large screen contexts, such as a navigation rail or navigation drawer.\n\nAt breakpoints from 600-1239dp, replace the navigation bar with a navigation rail.\n\nAt breakpoints from 1240dp+, replace the navigation rail with a navigation drawer.\n\n\n\nNavigation bars are best suited for mobile and small tablet interfaces\n\n \n\n![Navigation bar on small screen]\n\nSmall breakpoints: 360-599dp For small devices like phones, horizontal space is at a premium; the content area of an app usually spans the entire width of a screen. In this case, smaller navigation components should anchor to the top or bottom of a layout, saving space while making primary destinations accessible.\n\n![Navigation rail on tablet screen]\n\nMedium breakpoints: 600-1239dp On medium-sized devices like tablets, move primary navigation elements into a navigation rail that is fixed to the leading edge of the layout\n\n![Navigation drawer open on desktop screen]\n\nLarge breakpoints: 1240dp+  On devices with 1240dp+ widths, present destinations in a permanently visible or dismissible navigation drawer. Assign hierarchy based on how frequently or quickly a user needs to move between destinations.",
                    "Compact window size": "The navigation bar container uses 100% of the screen width on compact [window sizes], like mobile and portrait-oriented tablet devices.\n\n![Navigation bar with 3 destinations using full screen width]\n\nNavigation bars use 100% of the screen width\n\n \n\nOn portrait-oriented tablet screens and landscape-oriented mobile screens, navigation bar destinations can retain the same spacing used in portrait mode, or be equally distributed across the container.\n\n![Navigation bar in landscape view with destinations keeping the same spacing as in portrait mode.]",
                    "Medium and expanded window sizes": "The navigation bar is designed for smaller screens. It\u2019s not intended for larger screens like desktop.\n\n![Navigation bar in desktop layout, with 4 destinations spread out]",
                    "Density": "Always use the default height for navigation bars as a minimum.\n\n![Navigation bar with 3 destinations, 1 active, set at default height]\n\n![Navigation bar with applied density showing 3 destinations, 1 active]"
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "Navigation": "When you select a navigation bar item (one that\u2019s not currently selected), the app navigates to that destination\u2019s screen using a top level transition pattern.\n\nAfter selection, destinations can behave in one of two ways:\n\n1. **Preserve state**: If the user previously interacted with this destination, it returns to that place on the screen, including scroll position, tab selection, and in-line search\n\n   \n\n2. **Reset state**: Any prior user interactions and temporary screen states are reset, including scroll position, tab selection, and in-line search\n\nChoose the behavior that best suits the product and user needs. For example, an app that requires frequent switching between sections should preserve each section\u2019s state.\n\n\n\nAfter selecting an item on the bottom navigation bar, the app navigates to that destination\u2019s screen\n\n \n\nRe-selecting the currently active destination resets the scroll position to the top of the page.\n\n\n\nSelecting the already selected navigation item returns you to the top of the screen\n\n \n\nWhen moving downward in the app\u2019s hierarchy (from a parent screen to a child screen), a navigation bar can be displayed persistently for quick navigation between an app\u2019s sections.\n\n\n\nThe navigation bar in this music app remains in view when navigating to an album",
                    "Scrolling": "Upon scroll, the navigation bar can appear or disappear.\n\n\n\nScrolling downward can hide the navigation bar; scrolling upward reveals it"
                }
            }
        }
    },
    {
        "component_type": "navigation drawer",
        "description": "A component providing ergonomic access to destinations in an app. [Learn more about navigation drawers](https://m3.material.io/m3/pages/navigation-drawer/)",
        "guidelines": {
            "docs_path": "navigation-drawer_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#Use a navigation drawer for 5 or more primary destinations, or more than 1 level of navigation hierarchy",
                    "Anatomy#Sheet#A navigation drawer opens from the left side of the screen for left-to-right languages",
                    "Anatomy#Header (optional)#If branding is a priority, a branding element can be placed in the header area of a navigation drawer",
                    "Anatomy#Header (optional)#If a navigation drawer is the full vertical height of the page, a branding element or product name can be placed in the header area",
                    "Anatomy#Divider (optional)#Use full-width dividers (1) to separate groups of destinations",
                    "Anatomy#Label text and icons#Keep text labels concise, but truncate them if they extend beyond the container width",
                    "Anatomy#Label text and icons#Use recognizable icons when conventions exist"
                ],
                "dont": [
                    "Anatomy#Header (optional)#If a navigation drawer is clipped by a top app bar, don\u2019t place a branding element or product name in the header. In this case, the top app bar is a more suitable place for that content.",
                    "Anatomy#Divider (optional)#Don\u2019t use dividers to separate individual destinations",
                    "Anatomy#Label text and icons#Don\u2019t wrap label text",
                    "Anatomy#Label text and icons#Don\u2019t shrink text size in order to fit a text label on a single line",
                    "Anatomy#Label text and icons#Don\u2019t apply icons to some destinations and not others. Icons should be used for all destinations, or none."
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Navigation drawers provide access to destinations and app functionality, such as switching accounts. They can either be permanently on-screen or opened and closed by a navigation menu icon.\n\nNavigation drawers are recommended for:\n\n- Apps with 5 or more top-level destinations\n- Apps with 2 or more levels of navigation hierarchy\n- Quick navigation between unrelated destinations\n- Replacing the navigation rail or navigation bar on large screens\n\n![Navigation drawer with multiple destinations in a mail app]\n\n \n\nAvoid using a navigation drawer with other primary navigation components, such as a navigation bar. \n\nInstead, choose a single navigation component based on product requirements, breakpoints, and [window size class]: \n\n- Navigation bars for compact window sizes\n- Navigation rails for medium and expanded window sizes up to 1240dp\n- Standard navigation drawers for expanded window sizes 1240dp+ like desktop\n\n![Standard navigation drawer and navigation bar used together]\n\nexclamationCaution\n\nAvoid using two navigation components on the same screen\n\n \n\nThere are two types of navigation drawers:\n\n1. Standard navigation drawer\n2. Modal navigation drawer\n\n![Standard navigation drawer with destinations in mail app]\n\nStandard navigation drawer\n\n![Modal navigation drawer with destinations and scrim]\n\nModal navigation drawer",
                    "Standard navigation drawer": "Standard navigation drawers provide access to drawer destinations and app content on expanded windows with a width greater than 1240dp. They\u2019re often next to app content and affect the screen\u2019s layout grid.\n\nStandard drawers can be permanently visible (best for frequently switching destinations) or opened and closed by tapping a menu icon (best for focusing more on screen content).\n\nOn windows under 1240dp, use modal drawers instead.\n\n![Standard navigation drawer in a mail app with active destination \u201cInbox\u201d next to app content]\n\nStandard navigation drawer providing access to drawer destinations next to app content",
                    "Modal navigation drawer": "Modal navigation drawers use a scrim to block interaction with the rest of an app\u2019s content, and don\u2019t affect the screen\u2019s layout grid.\n\nModal navigation drawers are primarily used on mobile screens where space is limited, or prioritized for app content.\n\nThey can be swapped with standard drawers on desktop.\n\n![Modal navigation drawer with 1 active destination and scrim]\n\nModal navigation drawer using a scrim to block interaction with the rest of an app\u2019s content\n\n \n\nModal navigation drawers are always opened by an action outside of the drawer, such as clicking a navigation menu icon in a navigation rail.\n\nModal drawers can be dismissed by:\n\n- Selecting a drawer item\n- Tapping the scrim\n- Swiping toward the drawer\u2019s anchoring edge (for example,. swiping right-to-left for a left-aligned navigation drawer)\n\n![Diagram noting a navigation menu icon in a navigation rail]\n\nA modal drawer opened by an action such as clicking a navigation menu icon (1)\n\n \n\nModal drawers can be dismissed by tapping the scrim (1) or swiping the drawer toward its anchoring screen edge (2).\n\n![2 modal navigations illustrating tapping the scrim or swiping to dismiss a modal drawer]"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "Navigation drawers are essentially a list contained within a sheet. They can also include headers, subheads, and dividers to organize longer lists.\n\n \n\n![Navigation drawer diagram numbering 8 elements]\n\nNavigation drawers can include headers, subheads, and dividers to organize longer lists.\n\n1. Active Indicator\n2. Icon\n3. Label\n4. Badge label\n5. Sheet\n6. Divider\n7. Section label (optional)\n8. Scrim",
                    "Sheet": "A sheet holds all navigation drawer elements. Side sheets are used as the container for standard and modal navigation drawers.\n\nNavigation drawers that open from the side are always placed on the start edge of the screen, on the left for left-to-right languages, and on the right for right-to-left languages.\n\n![Modal navigation drawer opening from left side of screen]",
                    "Header (optional)": "The header area of a navigation drawer is a flexible space that can be used for brand expression (such as an app title or logo), an account switcher, and more.\n\n![Modal navigation drawer with branding element in header area]\n\n \n\n![Navigation drawer with branding element in header area]\n\n![Navigation drawer clipped by top app bar]",
                    "Divider (optional)": "[Dividers] can be used to separate groups of destinations within the navigation drawer.\n\n![Navigation drawer using horizontal dividers to separate a group of destinations]\n\n![Navigation drawer using horizontal dividers to separate individual destinations]",
                    "Active indicator": "The active indicator is a background shape communicating which destination of the navigation drawer is currently being displayed.\n\n![Navigation drawer diagram numbering 1 element]\n\nThe active indicator (1) is a background shape communicating which destination of the navigation drawer is currently being displayed",
                    "Label text and icons": "Destinations in a navigation drawer take the form of actionable list items. Each item describes its destination using label text and an optional icon.\n\nLabel text is important for usability and accessibility. Show labels when the drawer is both expanded and collapsed.\n\n![Navigation drawer diagram numbering 2 elements]\n\nActionable list items in a navigation drawer describe each destination using (1) an optional icon and (2) required label text\n\n \n\nLabel text should be clear and short enough that it isn\u2019t cut off by the sheet.\n\n![Navigation drawer using only label text for 4 destinations. Label text \u201cInbox\u201d in active destination]\n\nNavigation drawers can use text labels without icons\n\n \n\n![Navigation drawer with 1 truncated text label]\n\n![Navigation drawer with 1 text label with wrapped label text]\n\n![Navigation drawer with 1 text label featuring smaller text]\n\n \n\nIcons can supplement labels as indicators of a destination. When used, they should always be placed before text. Other app components and content should reference these icons.\n\n![Navigation drawer with active destination \u201cInbox\u201d featuring recognizable icon]\n\n![Navigation drawer with 4 destinations, 2 with text label and icon, 2 with only text label]",
                    "Section label (optional)": "Short subhead section labels can help group related destinations in the navigation drawer.\n\n![Navigation drawer showing subhead section labels]\n\nRelated destinations can be grouped using short subhead section labels in the navigation drawer",
                    "Scrim (modal only)": "Modal navigation drawers use a scrim to block interaction with the rest of the app. The scrim is placed directly behind the drawer\u2019s sheet and can be tapped or clicked to dismiss the drawer.\n\n![Modal navigation drawer with scrim placed behind]\n\nScrim applied behind a modal navigation drawer"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "A product\u2019s navigation component should change to suit the [window size class] and form factor of the screen.\n\nStandard navigation drawers are best for expanded window sizes at breakpoints of 1240dp or greater. \n\nAt medium and expanded window size breakpoints of 600dp\u20131239dp, swap out the navigation drawer for a navigation rail. \n\nAt the compact window size breakpoint less than 600dp, swap the rail for a navigation bar.\n\n![Navigation rail changing to navigation drawer on a larger screen]\n\nStandard navigation drawers change size to suit the device\u2019s screen",
                    "Compact window size": "Use modal navigation drawers in compact window sizes (breakpoints between 360dp and 599dp).\n\nFor small devices, horizontal space is at a premium and the body area of an app usually spans the entire width of a screen.\n\n![Modal navigation drawer with 1 active destination]\n\nUse a modal navigation drawer on mobile screens",
                    "Medium & expanded window sizes": "On medium-sized devices like tablets, and expanded windows (600dp\u20131239dp) use modal navigation drawers, or swap the drawer for a navigation rail.\n\n\n\nUse a navigation rail on tablet screens, or also allow a drawer to open and close via a menu icon",
                    "Desktop & large screens": "On devices with 1240dp+ widths, present destinations in a permanently visible or dismissible navigation drawer.\n\n![Navigation drawer showing 1 active destination]\n\nUse a standard navigation drawer on large and desktop screens\n\n \n\nWhen a navigation rail and modal navigation drawer are used together, the modal drawer can repeat destinations in the navigation rail as long as the drawer offers enough visual separation between levels of the navigation hierarchy.\n\nUse a transition to signal the switch of an on-screen component. For example, when shifting from portrait to landscape orientations, the navigation rail should transform into a navigation drawer.\n\n![Side-by-side navigation rail and navigation drawer with the same destinations]\n\nThe modal navigation drawer can repeat destinations from the navigation rail"
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "Scrolling": "Navigation drawers can be vertically scrolled, independent of the rest of the screen\u2019s content and UI. If the list of navigation destinations is longer than the height of the drawer, the drawer\u2019s contents can be scrolled within the drawer.\n\n![Navigation drawer scrolled vertically, with contents within the drawer scrolled independently]\n\nScrolling vertically allows navigation drawers to move independently from the rest of the screen"
                }
            }
        }
    },
    {
        "component_type": "navigation rail",
        "description": "A component providing access to primary destinations in apps when using tablet and desktop screens. [Learn more about navigation rails](https://m3.material.io/m3/pages/navigation-rail/overview/)",
        "guidelines": {
            "docs_path": "navigation-rail_guidelines.md",
            "hard": {
                "do": [
                    "Anatomy#Floating action button (FAB) (optional)#A top-aligned FAB in the navigation rail",
                    "Anatomy#Active indicator#Use the active indicator only for the active destination",
                    "Anatomy#Icons#Use the primary or high emphasis on color for the active destination",
                    "Anatomy#Label text#Write succinct labels that describe a destination",
                    "Placement#With a navigation drawer#Pair the rail with a modal navigation drawer when there are secondary destinations or actions that don\u2019t belong in the rail"
                ],
                "dont": [
                    "Anatomy#Container#Don\u2019t position the navigation rail container horizontally",
                    "Anatomy#Floating action button (FAB) (optional)#Do not place the FAB below rail destinations",
                    "Anatomy#Active indicator#Don\u2019t use the active indicator for more than one destination at a time",
                    "Anatomy#Icons#Don\u2019t use more than two colors for destinations or low-contrast colors in the navigation rail. This will make distinguishing active items more difficult.",
                    "Anatomy#Label text#Don\u2019t truncate or display an ellipsis in place of label text",
                    "Anatomy#Label text#Don\u2019t reduce the type size to fit more characters into a destination label",
                    "Anatomy#Label text#Avoid using icons without labels",
                    "Placement#With a navigation drawer#Don\u2019t use a navigation rail and bottom navigation on the same screen",
                    "Placement#With a navigation drawer#Do not show the rail and a standard navigation drawer at the same time"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "The rail is a side navigation component that displays three to seven app destinations and, optionally, a [floating action button] (FAB). Each destination is represented by an icon and label text.\n\nThe rail can serve as the sole navigation component in medium and expanded [window sizes] from 600dp\u20131239dp, such as desktops and tablets.\n\nWhen your product is used in compact windows under 600dp wide, the navigation rail should be swapped for a [navigation bar]. \n\nWhen your product is used on desktop screens of 1240dp or greater, the navigation rail can be swapped for a [navigation drawer].\n\n\n\n![3 app destinations, 1 active, and FAB in a navigation rail next to a map screen]\n\nA navigation rail can display three to seven app destinations represented by an icon and label text, with an optional FAB. A rail can serve as the sole navigation component on larger screens.\n\n \n\nNavigation rails should be used for:\n\n- Top-level destinations that need to be accessible anywhere in an app\n- Three to seven main destinations in a product\n- Tablet or desktop layouts\n\nNavigation rails shouldn\u2019t be used for:\n\n- Small screen sizes\n- Single tasks, such as viewing a single email\n- Secondary navigation destinations\n\n![Navigation rail with 4 destinations, 1 active next to a photos screen]\n\nUsed for top-level destinations that need to be accessible anywhere in an app, navigation rails include 3 to 7 main destinations in tablet or desktop layouts"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Navigation rail diagram numbering 11 elements]\n\nContainerMenu (optional)Floating action button (optional)Active indicatorIcon - activeLabel text - active (optional)Icon - inactiveLarge badgeLarge badge label (optional)Small badgeLabel text - inactive (optional)",
                    "Container": "The navigation rail is placed on the leading edge of the screen; on the left side for left-to-right languages, and on the right side for right-to-left languages.\n\n![2 navigation rails with 4 destinations, one placed on the left leading edge and the other on the right]\n\nBased on the language being used, a navigation rail is set on a screen\u2019s leading edge, left side for left-to-right languages, and right side for right-to-left languages\n\n \n\nThe navigation rail should always run vertically along the side of a layout. For horizontal navigation components or smaller screens, consider using a [navigation bar].\n\nFor closely related sibling views under one parent, tabs in combination with the navigation rail can form a cohesive navigation structure.\n\n![Navigation rail container placed horizontally on screen in a photos app]\n\n \n\nNavigation rail destinations can be aligned as a group to the top, bottom, or center of a layout. On tablets, bottom alignment can make destinations easier for a user to reach with their thumbs.\n\nThe menu and FAB should always be aligned to the top of the navigation rail.\n\n![3 navigation rails illustrating top-aligned, center-aligned, and bottom-aligned destinations]\n\nLeft to right: Top-, center-, and bottom-aligned rail destination placement",
                    "Menu (optional)": "The navigation rail can also include a menu icon to open a navigation drawer.\n\n![Icon for an overflow menu set above navigation rail]\n\nA navigation rail can also include an overflow menu",
                    "Floating action button (FAB) (optional)": "The rail provides a convenient container for anchoring the FAB to the top of a screen, placing the app\u2019s key action above navigation destinations.\n\nWhen nested within another component, such as the navigation rail, the FAB's resting elevation is at [level 0].\n\n![Navigation rail with FAB anchored at top of screen]\n\n![FAB placed at bottom of navigation rail]\n\n \n\nThe top of the rail can also be used for a logo.\n\n![Logo placed at top of navigation rail with visual similarities to other destination icons]\n\nexclamationCaution\n\nUse caution when placing logos in the rail where they might be confused with an action or destination",
                    "Active indicator": "The active indicator is a background shape communicating which destination of the navigation rail is currently being displayed.\n\n![Navigation rail with 4 destinations, 1 active indicator ]\n\n![Navigation rail with 4 destinations, all with active indicators]",
                    "Icons": "Navigation rail destinations are always represented by icons that symbolize the content or the nature of a destination.\n\n![Navigation rail with 3 inactive icons, 1 active icon]\n\nDestinations are always represented by icons in the navigation rail\n\n \n\nActive and inactive icon colors should have sufficient contrast against the container.\n\n![4 destinations, 1 active destination with a high-emphasis color indicator]\n\n![Navigation rail with 2 different color destinations, 1 with low-contrast]",
                    "Label text": "Label text provides short, meaningful descriptions of navigation destinations and an alternative way for users to understand an icon\u2019s meaning. \n\n![4 destinations with icons and label text labeled \u201cAll Files\u201d \u201cRecent\u201d \u201cImages\u201d and \u201cLibrary\u201d with the \u201cRecent\u201d destination selected]\n\n \n\nLabels should be short enough to not be truncated. Additionally, the type scale should not be reduced to fit longer text labels.\n\n![4 destinations, 1 active label with truncated label text]\n\n![4 destinations, 1 active label with smaller label text]\n\n \n\nAvoid wrapping long labels when possible. If necessary, create a line break between words, or hyphenate longer words.\n\n![4 destinations with 1 active label illustrating a line break between label text \u201cAll\u201d and \u201cImages\u201d]\n\nexclamationCaution\n\nBreak up longer phrases into two text lines if necessary\n\n \n\nLabel text is important for usability and accessibility. Show labels at all times.\n\n![Navigation rail showing 4 destination icons]",
                    "Badges": "Navigation rail icons can include badges on the upper right corner of the icon. Badges convey dynamic information about the associated destination, such as counts or status.\n\n![4 navigation rail icons with various upper right corner badges]\n\nSmall badge on a rail destination Large badge with a numberLarge badge with a maximum character count",
                    "Divider (optional)": "A vertical divider can help separate the rail from app content. The divider should be positioned on the edge of the rail container that\u2019s adjacent to the app\u2019s content area.\n\n![Vertical divider separates navigation rail from content]\n\nexclamationCaution\n\nA divider can make the navigation rail container distinct from other on-screen content"
                },
                "Placement": {
                    "general": {},
                    "soft": "",
                    "With a navigation drawer": "The rail provides access to three to seven top-level destinations. A modal navigation drawer, opened by selecting the menu icon, can work with the rail by displaying additional secondary destinations or actions.\n\n![Navigation rail transitions to modal navigation drawer]\n\n \n\n![Navigation rail on left edge, navigation bar on bottom edge of same screen]\n\n![Navigation rail placed on screen next to permanent navigation drawer]"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "When shrinking the window to a compact [window size], a navigation rail can transform into a [navigation bar], providing the same quick access in a configuration that\u2019s easier to use on smaller displays. However, the navigation rail and navigation bar should never be used simultaneously.\n\n![Left side featuring smaller device using navigation bar, right side showing larger display using navigation rail]\n\nLeft: On smaller devices, use a navigation barRight: On larger displays, use a navigation rail instead",
                    "Density": "For dense layouts, the default container width can be reduced.\n\n![4 destinations, 1 active with icon and label text]\n\nThe navigation rail at default width\n\n![4 destinations, 1 active icon]\n\nIn denser layouts, the rail width can be reduced"
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "Scrolling": "Destinations in the navigation rail should remain visible when scrolling vertically.\n\n\n\nRail destinations remain fixed while on-screen content scrolls vertically\n\n \n\nIf a layout scrolls horizontally, the rail can scroll off-screen or remain fixed. To distinguish that content is scrolling underneath the rail, use a divider or add elevation to the rail.\n\n![Navigation rail divided from horizontally scrolling content in photo all]\n\nA divider creates visual distinction between the rail and horizontally scrolling content\n\n![Elevated navigation rail is distinct from horizontally scrolling content]\n\nElevating the rail to level 1 creates visual distinction between the rail and horizontally scrolling content"
                }
            }
        }
    },
    {
        "component_type": "progress indicators",
        "description": "A component displaying an unspecified wait time or the length of a process. [Learn more about progress indicators](https://m3.material.io/m3/pages/progress-indicators/overview)",
        "guidelines": {
            "docs_path": "progress-indicators_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#Indicate overall progress of a group"
                ],
                "dont": [
                    "Usage#None#Indicate the progress of each activity in a group"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Progress indicators inform users about the status of ongoing processes, such as loading an app, submitting a form, or saving updates. They communicate an app\u2019s state and indicate available actions, such as whether users can navigate away from the current screen.\n\n**Progress as a group**\nWhen displaying progress for a sequence of processes, indicate overall progress rather than the progress of each activity.\n\n\n\n\n\n \n\nThere are two types of progress indicators:\n\n1. Linear\n2. Circular\n\nOnly one type should represent each kind of activity in an app. For example, if a refresh action displays a circular indicator on one screen, that same action shouldn\u2019t use a linear indicator elsewhere in the app.\n\n\n\nLinear indicatorCircular indicator\n\n \n\nEach type of progress indicator can be either determinate or indeterminate.\n\n**Determinate indicators** display how long a process will take. They should be used when the process completion rate can be detected.\n\n**Indeterminate indicators** express an unspecified amount of wait time. They should be used when progress isn\u2019t detectable, or if it\u2019s not necessary to indicate how long an activity will take.\n\n\n\nDeterminate progress indicators fill from 0 to 100%Indeterminate progress indicators move along a fixed track, growing and shrinking in size\n\n \n\nAs more information about a process becomes available, a progress indicator can switch from an indeterminate to a determinate state.\n\n\n\nA linear progress indicator changes from indeterminate to determinate while loading a screen"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![1. The track is a horizontal line. 2. A primary colored line over the contrasting colored track is the progress indicator.]\n\nTrack Indicator\n\n \n\nProgress indicators are made of a track (which is not visible for circular progress indicators) and an indicator.",
                    "Track": "The track is a fixed width rule, with set boundaries for the indicator to travel along.\n\n![A light colored horizontal line.]\n\nTrack of a linear progress indicator\n\n![Shows idea of circular progress indicator being invisible on screen.]\n\nTrack of a circular progress indicator, which is not visible and is implied by the path of the indicator in motion",
                    "Indicator": "The indicator animates along the length of the track.\n\n\n\nIndicator animating along the track of a linear progress indicator\n\n\n\nIndicator animating along the track of a circular progress indicator"
                },
                "Linear progress indicators": {
                    "general": {},
                    "soft": "Linear progress indicators display progress by animating along the length of a fixed, visible track. The behavior of the indicator is dependent on whether the progress of a process is known.\n\n\n\nLinear progress indicators are composed of track and indicator\n\n \n\nLinear progress indicators can be determinate or indeterminate.\n\nDeterminate operations display the indicator increasing from 0 to 100% of the track, in sync with the process\u2019s progress.\n\nIndeterminate operations display the indicator continually growing and shrinking along the track until the process is complete.\n\n\n\nDeterminate linear progress indicator\n\n\n\nIndeterminate linear progress indicator",
                    "Placement": "The placement of a linear progress indicator can indicate the scope of a process. For example:\n\n- Expanding items can place a linear indicator along their expanding edge to draw user attention to where new content will appear\n- A linear indicator at the center of the screen can indicate loading all screen content\n- A linear indicator attached to a container, such as a card, can indicate the process applies to that particular item (and that interaction with the rest of the UI is possible)\n\n\n\nExpanding items can place a linear indicator along their expanding edge to draw user attention to where new content will appear\n\n \n\n\n\nA linear indicator at the center of the screen indicates loading all screen content\n\n\n\nA linear indicator attached to a container indicates the process applies to that particular item (and that interaction with the rest of the UI is possible)"
                },
                "Circular progress indicators": {
                    "general": {},
                    "soft": "Circular progress indicators display progress by animating along an invisible circular track in a clockwise direction. They can be applied directly to a surface, such as a button or card.\n\nOn Android, the \u201cswipe to refresh\u201d gesture displays a circular progress indicator to indicate that the UI is being refreshed.\n\n\n\nCircular progress indicators are composed of an invisible track and an indicator\n\n \n\nCircular progress indicators can be determinate or indeterminate.\n\n- Determinate circular indicators fill the invisible, circular track with color, as the indicator moves from 0 to 360 degrees\n- Indeterminate circular indicators grow and shrink in size while moving along the invisible track\n\n\n\nDeterminate circular progress indicator\n\n\n\nIndeterminate circular progress indicator"
                }
            }
        }
    },
    {
        "component_type": "radio button",
        "description": "A component allowing users to select one option from a set. [Learn more about radio buttons](https://m3.material.io/m3/pages/radio-button/overview)",
        "guidelines": {
            "docs_path": "radio-button_guidelines.md",
            "hard": {
                "do": [
                    "Placement#None#Radio buttons should always have one option pre-selected"
                ],
                "dont": [
                    "Usage#None#Don\u2019t nest radio buttons",
                    "Usage#None#Don\u2019t allow radio buttons to select multiple options"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Radio buttons are the recommended way to allow users to make a single selection from a list of options. \n\nOnly one radio button can be selected at a time.\n\n\n\nRadio buttons should always be be accompanied by clear inline labels\n\n \n\nUse radio buttons to:\n\n- Select a single option from a set\n- Expose all available options\n\n![img]\n\nRadio buttons are single-select, unlike checkboxes which are multi-select\n\n \n\n![img]\n\nUse radio buttons when only one option can be selected from a list\n\n![img]\n\nUse Checkboxes when multiple options can be selected from a list\n\n \n\nAvoid nesting radio buttons or using radio buttons to select multiple options.\n\n![img]\n\n![img]",
                    "Alternate selection controls": "Radio buttons are one of several selection controls, which allow users to make choices such as selecting options or switching settings on or off.\n\nSwitches and checkboxes are alternative selection controls that can be used to enter decisions or declare preferences such as settings or dialogs.\n\n![img]\n\nSwitches\n\n![img]\n\nCheckboxes\n\n \n\nUse radio buttons when there are five or fewer options.\n\nConsider using a drop-down menu instead of radio buttons when it\u2019s important to save space on a screen. However, drop-down menus require additional steps for the user, both in the number of clicks and cognitive effort.\n\n![img]\n\nUse radio buttons when there are five or fewer options\n\n![img]\n\nConsider using a drop-down menu instead of radio buttons when space is constrained"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![img]\n\nIcon (selected) Adjacent label textIcon (unselected)",
                    "Adjacent label text": "Always pair radio buttons with an adjacent label describing what the radio button selects.\n\nBecause only one radio button can be selected at a time, each choice must have its own label.\n\n![img]\n\nAdjacent label text next to radio buttons"
                },
                "Placement": {
                    "general": {},
                    "soft": "Radio buttons are often arranged in stacked layouts\n\n![img]\n\nStacked list of radio buttons\n\n \n\nRadio buttons should be vertically listed and have one option always selected.\n\n![img]\n\n![img]\n\nexclamationCaution\n\nAvoid using horizontal lists, but if your designs requires it, ensure proper spacing between list items"
                }
            }
        }
    },
    {
        "component_type": "search",
        "description": "",
        "guidelines": {
            "docs_path": "search_guidelines.md",
            "hard": {
                "do": [],
                "dont": []
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Search is a navigation method that allows people to quickly find information across an app. Users input a query into the search bar or text field of the search view and then see related results.\n\n![A search bar on a mobile screen.]\n\nSearch bar with a leading and trailing icons\n\n \n\nSearch view, which can display dynamic suggestions, is the focused state of search bar.\n\n![Search view on a mobile screen.]\n\nSearch view opens once the search bar is focused"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "",
                    "Search bar": "![Four elements of a search bar.]\n\nContainerLeading icon buttonSupporting textAvatar or trailing icon (optional)",
                    "Search view": "![Seven elements of search view.]\n\nContainerHeaderLeading icon button\\Supporting textTrailing icon buttonInput textDivider",
                    "Container": "The container holds all other component elements. The search bar container has rounded corners. The search view container is full screen in compact [window sizes], like mobile.\n\n![Side-by-side comparison of a search bar container and search view container.]\n\nSearch bar and search view containers",
                    "Icons and icon buttons": "**Leading icon\n\n**The left side of the bar should contain either a navigational action (such as a menu or up-arrow) or a non-functional search icon.\n\n![The search bar on a tablet screen contains a non-functional search icon and a trailing avatar.]\n\nSearch bar containing a non-functional search icon\n\n \n\n**Trailing icon\n\n**Up to two action icons can be located on the bar\u2019s right-hand side. These actions can represent additional modes of searching (like voice search), a separate high-level action (such as current location) or an overflow menu.\n\n![A search bar with two trailing icons: a microphone and a menu.\u2028]\n\nUse a maximum of two trailing icons\n\n \n\n![A search bar with a trailing microphone icon and trailing avatar.]\n\nCombine an avatar only with one additional trailing icon\n\n![Search view with a trailing \u201cclear\u201d icon.]\n\nThe focused search view can show an optional clear icon",
                    "Text": "**Hinted search text\n\n**Provide a short description of what the user will be able to search for.\n\n**Input text\n\n**Once the user starts typing, the hinted search text is replaced with the input text.    \n\n![Search view with a hinted search text on the left and input text on the right.]\n\nSearch view\u2019s hinted search text is replaced once the user starts typing.\n\n \n\n**Suggestions and results\n\n**Present suggestions and search results in a compact, organized list.\n\nConsider including avatars or other high priority entities in search results that the user may want to access right away.\n\n![Search view with suggestions organized in a column, ending with a row of contact avatars with names.]\n\nSearch view before entering input text showing suggestions",
                    "Divider": "Dividers can be used to separate groups of related results or suggested queries.\n\n![A solid line separates the location and calendar list items from people and pets avatars.]\n\nSeparate list items into distinct groups using a divider"
                },
                "Search bar": {
                    "general": {},
                    "soft": "The search bar is a persistent and prominent search field at the top of the screen.\n\nUse a search bar when search is the primary focus of the app.\n\n![The search bar is the  first thing under the Settings heading on a mobile screen.]\n\nSearch bar as the primary focus within an application",
                    "Placement": "The search bar is centered and usually at the top of the screen\n\n![A search bar at the top of a mobile screen above favorites avatars.]\n\nA prominent placement of search bars helps users to easily find the entry point for their search queries",
                    "Responsive layout": "When scaling layouts for [adaptive layout design], consider how the search bar position and alignment should scale.\n\nFor most cases, it's recommended that the search bar stays in its layout region and scales in width accordingly. Internal elements are anchored to the left and right as the parent container scales.\n\n\n\nUse the search bar close to the content a user will be able to search",
                    "Behavior": "#### Focus\nOn focus, the search bar expands into a search view, which can display historical search suggestions.\n\nTap the back icon to release focus from the search box and dismiss search suggestions.\n\n\n\n\n\nSearch bar expanding to the search view after being in focus\n\n \n\nWhile search view is typically displayed after a user taps search bar, search view can also serve as the primary focus state if searching is intended to be the user\u2019s primary action.\n\n![Search view on a mobile screen with a list of suggested contacts.]\n\nSearch views can also be used as a standalone destination reached for example via a navigation item in the navigation bar\n",
                    "Search": "A user can type a query or select from a suggestion (if available). Upon pressing Return, the search is submitted.\n\nSearch results are displayed below the search bar.\n\n\n\nSearch by typing or choosing a suggested search term",
                    "Scroll": "Depending on needs, the bar can scroll away with content or remain fixed at the top of the screen.\n\n\n\nSearch bar scrolling up with the content appears again once a user scrolls back down the content"
                },
                "Search view": {
                    "general": {},
                    "soft": "The search view is a full-screen modal typically opened by selecting a search icon.\n\nUse a search view when search is not the primary focus of the app.\n\n\n\nA search icon can also be used to expand into the search view",
                    "Placement": "The search view is a full-screen modal in compact [window sizes], like mobile devices, and a modal connected to the search bar in medium and expanded windows.\n\n![Search view as a modal and as a full screen configuration.]\n\nSearch views can be used in a modal configuration like in the example on the left, or in a full-screen configuration on the right which is the default for mobile experiences",
                    "Responsive layout": "When scaling layouts for [adaptive layout design], consider how the search bar position and alignment should scale.\n\nIn compact [window sizes], the search view should be a full-screen modal, while in medium and expanded window sizes, the search view should be a modal connected to the search bar and scale with the search bar width.\n\n\n\nUse a full-screen search view on mobile devices, and switch to a modal search view on larger screens",
                    "Behavior": "#### Appearing\nThe user taps a search icon (in a top app bar), opening the search view modal.\n\n\n\nA search icon expanding into a search view\n#### Search\nAs a user types, historical search suggestions can be shown beneath the search bar.\n\nUpon entering a query or choosing a suggestion, pressing Return submits the search.\n\nResults appear below the search bar and scroll beneath it.\n\n![\u201cPeanut\u201d is the entered search query as well as the first suggestion in the list.]\n\nPresent suggestions and search results in a compact, organized list\n\n \n\nWhen displaying results, the search text field remains visible, but not in focus. Tapping the Up arrow releases the focus from search, dismisses suggestions and the on-screen keyboard, and returns the toolbar to its original state.\n\n\n\nEntering a search query into the search view\n"
                }
            }
        }
    },
    {
        "component_type": "segmented buttons",
        "description": "",
        "guidelines": {
            "docs_path": "segmented-buttons_guidelines.md",
            "hard": {
                "do": [
                    "Anatomy#Segments#Segmented buttons are best used for selecting between 2 and 5 choices",
                    "Anatomy#Label text#Keep labels short and consistent in length",
                    "Anatomy#Label text#Use consistent label types"
                ],
                "dont": [
                    "Anatomy#Segments#Don\u2019t use more than five segments in a single segmented button. Choices should be scoped. If you have more than five choices, consider using another component, such as chips. ",
                    "Anatomy#Label text#Don\u2019t allow segments to wrap onto a new line",
                    "Anatomy#Label text#Avoid mixing icon-only labels with text labels. Choose one label type and use that type for all segments."
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Segmented buttons help people select options, switch views, or sort elements.\n\n![Desktop UI of map location results with segmented button]\n\nA segmented button can help switch between viewing restaurant and bar options\n\n \n\nThere are 2 types of segmented buttons:\n\n1. Single-select\n2. Multi-select\n\n![Side by side view of single and multi-select segmented buttons]\n\nSingle-select segmented button can only have 1 segment selectedMulti-select segmented button can have multiple segments selected"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Diagram of segmented button indicating 5 parts of its anatomy]\n\nSegmentContainerIcon (optional)Label text (optional)Selected icon",
                    "Segments": "Segmented buttons can have 2-5 segments. Each segment is clearly divided and contains label text, an icon, or both.\n\n![Side by side view of segmented buttons each with additional segment starting from 2 to 5]\n\nThere can be anywhere from 2 to 5 segments in single-select and multi-select segmented buttons\n\n \n\n![Mobile UI of data usage screen with segmented button]\n\n![Incorrect use of segmented button with 6 segments]",
                    "Container": "Like common buttons, segmented buttons have fully rounded corners by default.\n\n![Close up detail of segmented button with fully rounded corners]\n\nSegmented buttons have fully rounded corners",
                    "Icons": "Icons may be used as labels by themselves or alongside text. \n\nIf an icon is used without label text, it must clearly communicate the option it represents. \n\n![Side by side view of segmented buttons with different configurations of icons and label text]\n\nSegmented buttons can include icons",
                    "Label text": "Labels should be short and succinct. If a label is too long to fit within its segment, consider using an icon alone.\n\n![Mobile UI of music app showing a segmented button with options for music, albums, podcasts]\n\nUse labels that are as clear and short as possible\n\n \n\n![Segmented button with options for day, week, month]\n\n![Segmented button with 4 segments. 3 are next to each other. The 4th is wrapped on a new line.]\n\n \n\n![Segmented button with text labels reading day, week, month]\n\n![Segmented button with icons only labels for walking, transit, driving]\n\nexclamationCaution\n\nIcons can be used in place of labels, but they must clearly communicate their meaning\n\n![Segmented button with 2 icon only options indicating favorite and bookmark and 3rd option with text label reading recent]"
                },
                "Single-select": {
                    "general": {},
                    "soft": "Use a single-select segmented button to select one option from a set, switch between views, or sort elements from up to five options. \n\nFor example, use a single-select segmented button to choose one of a set of sizes, such as this beverage size selector.\n\n![Mobile UI for ecommerce app with segmented button with 3 beverage size options]\n\nA single select segmented button for choosing beverage size"
                },
                "Multi-select": {
                    "general": {},
                    "soft": "Use a multi-select segmented button to select or sort from two to five options. Unlike single-select, selection is not required and a user may concurrently select anywhere from all to none of the options. \n\nFor example, multi-select segmented buttons can be used to filter by price range when searching for a restaurant. \n\n![Mobile UI for ecommerce app with multi-select segmented button with 4 price range options ]\n\nA multi-select segmented button for filtering restaurant search options"
                },
                "Placement": {
                    "general": {},
                    "soft": "Segmented buttons should have adequate margins from the edge of the viewport or frame. \n\n![Mobile UI with 2-segment segmented button and 4-segment segmented button each with same margins to the viewport edge.]\n\nAllow adequate space for margins. The button container shouldn\u2019t reach the edge of the viewport. \n\n \n\nSegmented buttons can be placed on other components, such as bottom sheets, floating sheets, or full-screen dialogs. \n\n![Mobile UI with segmented button in bottom sheet]\n\nA segmented button can be placed on a bottom sheet"
                }
            }
        }
    },
    {
        "component_type": "side sheets",
        "description": "A component containing supplementary content that\u2019s anchored to the left or right edge of the screen.",
        "guidelines": {
            "docs_path": "side-sheets_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#Place side sheets along the edge of the screen, usually on the right side to avoid interference with any navigational components on the left edge. They can be slightly inset by 16dp.",
                    "Behavior#None#Side sheets can vertically scroll internally when their content exceeds the screen height"
                ],
                "dont": [
                    "Usage#None#Don\u2019t inset a side sheet from the screen edges far beyond the recommended margin. This makes the sheet\u2019s position and scroll behavior unclear, while obscuring primary content.",
                    "Behavior#None#Don\u2019t allow horizontal scrolling in a side sheet or layout in a way that suggests horizontal scrolling. A side sheet\u2019s narrow width leaves limited space to fully view items."
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Standard side sheets are supplementary surfaces used mostly in medium to expanded [window sizes], like tablet and desktop. They provide a consistent and predictable surface for contextual actions and information.\n\nStandard side sheets display content that complements the screen\u2019s primary content. They remain visible while users interact with primary content.\n\nCommon uses include:\n\n- Displaying a list of actions that affect the screen\u2019s primary content, such as filters\n- Displaying supplemental content and features \n\n![Standard side sheet showing supplementary information about a photo.]\n\nInformation about a photo in a standard side sheet\n\n \n\nModal side sheets are preferred in compact window sizes, like mobile, due to limited screen size. They can display the same types of content as standard side sheets, but must be dismissed in order to interact with the underlying content.\n\n![Modal side sheet showing filter controls.]\n\nModal side sheet with filter controls\n\n \n\nSide sheets have a fixed width and typically span the height of the screen. Their dimensions depend on how the app\u2019s layout is subdivided into UI regions.\n\n![A modal sheet at the right of a screen, with the correct inset.]\n\n![A modal side sheet at the right of the screen with the wrong inset.]"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Four elements of a standard side sheet. \u2028]\n\nDivider (optional) Headline (optional) Sheet container Close icon button (optional)\n\n \n\n![Seven elements of a modal side sheet.]\n\nBack affordance (optional) Headline (optional)Sheet container Close icon button (optional) Divider (optional) Actions (optional)Scrim",
                    "Container": "Side sheet containers hold all side sheet elements. Their size is determined by the space those elements occupy.\n \nThe container is the only required element of a side sheet. All other elements are optional.\n\n![A modal side sheet\u2019s container.]\n\nContainer",
                    "Icon buttons (optional)": "[Icon buttons] can provide ways to exit a side sheet or move to a different experience.\n\nBecause the primary content behind or beside a side sheet is always visible, it\u2019s important to provide affordances for leaving a side sheet and returning to the primary content.\n\n![Back icon button on the upper left of a modal side sheet.]\n\nBack icon button",
                    "Close (optional)": "A close affordance provides a consistent method for dismissing a side sheet. It is optional, although highly suggested, and increases accessibility by making focused side sheets easier to close.\n\n![Close button on the upper right of a modal side sheet.]\n\nClose icon button",
                    "Buttons (optional)": "[Buttons] represent actions available from a side sheet, and might include save, edit, or download. Use elevation, fill, and tone to call attention to specific actions.\n\n![Save and cancel buttons at the bottom of a modal side sheet.]\n\nFilled button",
                    "Divider (optional)": "[Dividers] can separate different types of content and create distinct regions in a side sheet. \n\nActions might be separated from content using a divider, or user-generated content might be separated from system-generated content.\n\n![Horizontal divider on a modal side sheet.]\n\nDivider",
                    "Content (optional)": "Side sheets can display a wide variety of content and layouts, ranging from a list of actions to supplemental content in a tabular layout.\n\n![A settings control pane inside a standard side sheet.]\n\nForm controls shown in a side sheet for app settings\n\n \n\n\n\nModal side sheets on smaller screens can transition to standard side sheets at larger screen sizes"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "Side sheets have a default width, but can be resized depending on the needs of the layout. \n\nNote that when a standard side sheet opens, the body area shrinks to accommodate the sheet\u2019s width while maintaining a margin on the body\u2019s trailing edge.\n\n\n\nEntrance of standard side sheets will cause the body area to adjust to accommodate"
                },
                "Behavior": {
                    "general": {},
                    "soft": "Side sheets can vertically scroll independent of the rest of the UI. This allows their scroll position and content to persist while the page is scrolled, and vice versa.\n\nSide sheets cannot scroll horizontally.\n\n\n\n![img]"
                }
            }
        }
    },
    {
        "component_type": "sliders",
        "description": "A component that allows users to make selections from a range of values.",
        "guidelines": {
            "docs_path": "sliders_guidelines.md",
            "hard": {
                "do": [],
                "dont": []
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Sliders allow users to view and select a value (or range) along a track. They\u2019re ideal for adjusting settings such as volume and brightness, or for applying image filters.\n\nSliders can use icons or labels to represent a numeric or relative scale. \n\n![Sound settings screen with sliders labeled call volume and alarm volume.]\n\nExample settings screen with two continuous sliders\n\n \n\n**Immediate effects\n**Changes made with sliders are immediate, allowing the user to make slider adjustments while determining a selection. Sliders shouldn\u2019t be used to adjust settings with any delay in providing user feedback.\n\n**Current state\n**Sliders reflect the current state of the settings they control.\n\n\n\nSelection changes are immediately reflected\n\n \n\nThere are two types of sliders:\n\n1. **Continuous slider \n   **Allows users to select a value along a subjective range\n\n2. **Discrete slider \n   **Allows users to select a specific value from a predetermined range. Tick marks may be used to indicate available values.\n\n   \n\n![There are no tick marks on the slider\u2019s active and inactive tracks. The slider handle is half-way along the track.]\n\nA continuous slider\n\n![There are tick marks on the slider\u2019s active and inactive tracks. The slider handle is half-way along the track.]\n\nA discrete slider"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Four elements of a slider.]\n\nTrack Tick marks (optional) Handle Value label (optional)",
                    "Track": "The track shows the range that is available for a user to select from. For left-to-right (LTR) languages, the smallest value appears on the far left end of the track and the largest value is on the far right. For right-to-left (RTL) languages this orientation is reversed.\n\n![Sliders for font size and display size have a minus sign on the far left side and a plus sign at the far right side.]",
                    "Tick marks (optional)": "Tick marks along a track represent predetermined values that the user can select from. \n\n\n\n![Tick marks are set equal distance apart along the active and inactive tracks. The value label is 4.]\n\nTick marks on a discrete slider",
                    "Handle": "The handle is a position indicator that can be moved along the track, displaying the selected value of its position.\n\nWhen sliders have two handles, they indicate the minimum and maximum values in a range.\n\n![The handle is a filled circle and is between the active and inactive sections of the track.]\n\nA single value slider\n\n![The handles are two filled circles with an active track between them and inactive track on either side.]\n\nA range slider\n\n \n\n**Overlapping handles\n**The handle last moved exists on top of the second handle. The handle and label on top use a 1dp white border that is only visible when the two handles overlap.\n\n\n\nThe most recently used handle appears on top",
                    "Value label (optional)": "A value label displays the specific value that corresponds with the handle\u2019s placement. \n\nThe label appears when the handle is selected. For range sliders, labels appear when either handle is selected.\n\n![A range slider\u2019s   handle has a value label of 50.]\n\nA single value slider\n\n![A range slider\u2019s  handles have value labels of 2 and 6.]\n\nA range slider"
                },
                "Behavior": {
                    "general": {},
                    "soft": "Sliders can be controlled by:\n\n1. Select and drag\n2. Select jump\n3. Select and arrow",
                    "Select and drag": "Select a value by dragging the handle.  \n\n\n\nContinuous slider: Handle moves smoothly\n\n\n\nDiscrete slider: Handle snaps to closest tick mark",
                    "Select jump": "Select a value by selecting part of the track. \n\n\n\nContinuous slider: Handle moves to selected location\n\n\n\nDiscrete slider: Handle snaps to closest tick mark"
                }
            }
        }
    },
    {
        "component_type": "snackbar",
        "description": "A component that provides brief messages about app processes at the bottom of the screen. [Learn more about snackbars](https://m3.material.io/m3/pages/snackbar/overview/)",
        "guidelines": {
            "docs_path": "snackbar_guidelines.md",
            "hard": {
                "do": [
                    "Anatomy#Text labels#On mobile, use up to two lines of text to communicate the snackbar message",
                    "Anatomy#Text labels#On mobile, use one line of text where possible to communicate the snackbar message",
                    "Anatomy#Container#In wide layouts, extend the container width to accommodate longer text labels",
                    "Anatomy#Action#If an action is long, it can be displayed on a third line",
                    "Anatomy#Action#To allow users to amend choices, display an \"Undo\" action",
                    "Placement#At the bottom of a UI#Place a snackbar in front of the main content"
                ],
                "dont": [
                    "Anatomy#Text labels#Don\u2019t use icons in snackbars. If your message needs an icon, consider using a different component.",
                    "Anatomy#Container#Avoid significantly altering the shape of a snackbar container",
                    "Anatomy#Action#The text label shouldn\u2019t share the same color as the text button",
                    "Anatomy#Action#Don\u2019t use a filled or elevated button in a snackbar, as it draws too much attention",
                    "Placement#At the bottom of a UI#Avoid placing snackbars in front of navigation components",
                    "Placement#At the bottom of a UI#Don\u2019t place a snackbar in front of a FAB",
                    "Placement#At the bottom of a UI#Don\u2019t place a snackbar behind a FAB",
                    "Responsive layout#Medium & expanded window sizes#Don\u2019t place snackbars flush to one edge of the layout",
                    "Responsive layout#Medium & expanded window sizes#Don\u2019t place consecutive snackbars side by side or next to one another"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Snackbars inform users of a process that an app has performed or will perform. They appear temporarily, towards the bottom of the screen. They shouldn\u2019t interrupt the user experience, and they don\u2019t require user input to disappear.\n\n**Frequency**\nOnly one snackbar may be displayed at a time.\n\n**Actions**\nA snackbar can contain a single action. \"Dismiss\" or \"cancel\" actions are optional.\n\n![img]\n\n \n\n**When to use snackbars**\nSnackbars communicate messages that are minimally interruptive and don\u2019t require user action.\n\n \n\n| Component | Priority                   | User action                                                  |\n| --------- | -------------------------- | ------------------------------------------------------------ |\n| Snackbar  | Low priority               | Optional: Snackbars disappear automatically                  |\n| Banner    | Prominent, medium priority | Optional: Banners remain until dismissed by the user, or if the state that caused the banner is resolved |\n| Dialog    | Highest priority           | Required: Dialogs block app usage until the user takes a dialog action or exits the dialog (if available) |"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![img]\n\nContainerSupporting textAction (optional)Close button (optional)",
                    "Text labels": "Snackbars contain a text label that directly relates to the process being performed. In compact [window sizes], like mobile, the text label can contain up to two lines of text.\n\n![img]\n\nText labels are short, clear updates on processes that have been performed\n\n \n\n![img]\n\n![img]\n\n![img]",
                    "Container": "Snackbars are displayed in rectangular containers with a grey background. Containers should be completely opaque, so that text labels remain legible.\n\n![img]\n\nSnackbar containers use a solid background color with a shadow to stand out against content\n\n \n\n![img]\n\n \n\n![img]\n\nexclamationCaution\n\nAn app can apply slight transparency to the container background, as long as text remains clearly legible\n\n![img]",
                    "Action": "Snackbars can display a single text button that lets users take action on a process performed by the app. Snackbars shouldn\u2019t be the only way to access a core use case, to make an app usable.\n\n![img]\n\nTo distinguish the action from the text label, text buttons should display colored text\n\n \n\n![img]\n\n![img]\n\n \n\n![img]\n\n![img]\n\n![img]\n\nexclamationCaution\n\nA dismiss action is unnecessary, as snackbar disappears on their own by default"
                },
                "Placement": {
                    "general": {},
                    "soft": "",
                    "At the bottom of a UI": "Snackbars should be placed at the bottom of a UI, in front of the main content. In some cases, snackbars can be nudged upwards to avoid overlapping with other UI elements near the bottom, such as FABs or bottom app bars.\n\nAvoid placing a snackbar in front of frequently used touch targets or navigation.\n\n![img]\n\n![img]\n\n \n\nSnackbars can span the entire width of the screen only when a UI does not use persistent navigation components like app bars or navigation bars.\n\nSnackbars that span the entire width of a UI can push up FABs when they appear.\n\n![img]\n\nexclamationCautionSnackbars can span the entire width of a UI. However, they should not appear in front of navigation or other important UI elements like floating action buttons.\n\n \n\n**Snackbars and floating action buttons (FABs)**\n \nSnackbars should appear above FABs.\n\n![img]\n\nSnackbar above a FAB\n\n \n\n![img]\n\n![img]"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "",
                    "Compact window size": "In compact [window sizes], like mobile screens, snackbars should expand vertically from 48dp to 64dp to accommodate one or two lines of text, while maintaining a  fixed distance from the leading, trailing, and bottom edges of the screen.\n\n![img]",
                    "Medium & expanded window sizes": "On medium and expanded window sizes, like tablet and desktop, snackbars should scale horizontally to accommodate longer text strings, keeping in mind that the ideal line length for text is typically between 40-60 characters.\n\nSnackbars use a flexible distance from the trailing edge of the screen. Whenever possible, snackbars on medium and large displays should aim for a single line of text with an  optional button.\n\n![img]\n\n \n\nIn wider layouts, snackbars can be left-aligned or center-aligned if they are consistently placed on the same spot at the bottom of the screen.\n\n \n\n![img]\n\nLeft-aligned snackbar\n\n![img]\n\nCenter-aligned snackbar\n\n \n\n![img]\n\n \n\n![img]"
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "Appearing and disappearing": "Snackbars appear without warning, and don't require user interaction. They automatically disappear from the screen after a minimum of four seconds, and a maximum of ten seconds.\n\n\n\nSnackbars should automatically appear and disappear, without requiring interaction"
                }
            }
        }
    },
    {
        "component_type": "switch",
        "description": "A component that toggles the state of a single item on or off. [Learn more about switches](https://m3.material.io/m3/pages/switch/overview)",
        "guidelines": {
            "docs_path": "switch_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#Use switches to turn states on or off, specifically on mobile instead of a checkbox",
                    "Usage#None#Use segmented buttons to control opposing options",
                    "Usage#Alternate selection controls#Use checkboxes (not switches) to let users select one or more options from a list",
                    "Usage#Alternate selection controls#Use radio buttons (not switches) when only one item can be selected from a list",
                    "Anatomy#Icon (optional)#Use icons that clearly communicate whether the switch is on or off, such as an X and a checkmark",
                    "Anatomy#Label text#Keep labels short and direct. A label should describe what the control does when the switch is on."
                ],
                "dont": [
                    "Usage#None#Use radio buttons to toggle items on or off. Radio buttons convey that a set of items are options and can only be selected one at a time. Instead use switches.",
                    "Usage#None#Don\u2019t use switches to control opposing options. Instead, use a different component like a segmented button.",
                    "Usage#Alternate selection controls#Don\u2019t use a switch in place of a button. When users see a call to action, they expect to interact with a button, not a switch.",
                    "Usage#Alternate selection controls#Don\u2019t use a switch to select one or more options from a list. Switches should provide an immediate noticeable effect that doesn\u2019t require the user to click Save or Submit to apply the new state.",
                    "Anatomy#Label text#Don't add label text into the switch itself because the small font size can be difficult to read. Instead, use icons in the thumb to communicate selection state. "
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Switches are the preferred way to adjust settings. They're used to control binary options \u2013 think On/Off or True/False.\n\n\n\nUse a switch to turn an option on and off\n\n \n\nUse switches to:\n\n- Toggle a single item on or off\n- Immediately activate or deactivate something\n\n![Switch used in notification settings to turn on and off the \"play over notifications\" function.]\n\n \n\nSwitches should be used instead of radio buttons if each item in a set can be independently controlled.\n\n![Radio buttons used to select Wi-Fi or Bluetooth in the Settings app on a mobile device.]\n\n \n\nSwitches control binary options, not opposing ones. A binary option represents a single state that is either on or off. \n\nOpposing options are two separate states that are opposite but related to different user tasks.\n\n![A switch with non-binary options of List View and Map View.]\n\n![Segmented buttons with options of List View and Map View.]",
                    "Alternate selection controls": "Checkboxes and radio buttons are alternative selection controls that can be used to enter decisions or declare preferences such as settings or dialogs.\n\n![Two checkboxes, one unchecked and one checked.]\n\nCheckboxes\n\n![Two radio buttons, one in enabled state, one in disabled state.]\n\nRadio buttons\n\n \n\n![Mobile screen with checkboxes to select list items and call to action button to update the list.]\n\n![Mobile screen with checkboxes to select list items and call to action switch to update the list.]\n\n \n\n![Radio buttons used to select a language for a mobile app.]\n\n![Mobile screen with switches to select list items and call to action button to update the list.]"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Three elements of a switch. ]\n\nTrack ThumbIcon (optional)",
                    "Icon (optional)": "The switch thumb can contain an optional icon.\n\n\n\nThe icon within the thumb should always communicate the state of the switch\n\n \n\nIcons can be used to visually emphasize the switch\u2019s selected state. The icon\u2019s meaning should be clear and unambiguous to help the user understand whether switch is on or off.\n\n![Two switches, the unselected state thumb icons are X and dash, selected state are checkmarks.]\n\n![A switch\u2019s unselected state thumb icons is a moon and the selected state icon is a pencil.]\n\nexclamationCaution\n\nUse caution when incorporating icons that have more ambiguous or non-binary meanings, such as moon and edit",
                    "Label text": "Switches should always be paired with an inline label describing the option that the switch controls, as well as its state.\n\n![Switch label text: 1. Permission manager, App has access to your data. 2. Camera access, app has access to your camera. ]\n\n \n\n![alt text: Screen showing stacked inline labels and switch controls containing label text.]"
                },
                "Placement": {
                    "general": {},
                    "soft": "Switches are often arranged in stacked layouts.\n\n![Label text and switches are stacked in separate columns on a mobile screen. The switches are in various states.]\n\nSettings screens are common places to use switches"
                }
            }
        }
    },
    {
        "component_type": "tabs",
        "description": "A component used to organize content across different screens, data sets, and other interactions. [Learn more about tabs](https://m3.material.io/m3/pages/tabs/overview)",
        "guidelines": {
            "docs_path": "tabs_guidelines.md",
            "hard": {
                "do": [
                    "Usage#Related content#Utilize tabs to categorize related groups of content into clearly defined sets",
                    "Anatomy#Icon (optional)#Use icons that are globally recognized when using icons alone",
                    "Anatomy#Label#Use an offset from the left when using a scrollable tab so it is clear that more content is available",
                    "Behavior#Fixed tabs#Use different gesture directions when using tabs"
                ],
                "dont": [
                    "Usage#Related content#Don\u2019t use tabs to move through sequential content that needs to be read in a particular order. Instead, create hierarchy within the content using techniques like typography style and open space.",
                    "Anatomy#Icon (optional)#Don\u2019t use tabs with both icons and text labels on only some tabs, but not others",
                    "Anatomy#Label#Don\u2019t truncate labels unless required, as truncated text can impede comprehension",
                    "Behavior#Fixed tabs#Avoid placing swipeable items in the content area of a UI that has tabs, as the user may mistakenly swipe the wrong component"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Tabs organize groups of related content that are at the same level of hierarchy.\n\n![Mobile screen with 3 tabs: video, photos and audio. Each tab has an an icon and text.]\n\nTab labels can include icons and text. Text labels should be short.\n\n \n\nThere are two types of tabs:\n\n1. Primary tabs\n2. Secondary tabs\n\nPrimary tabs are placed at the top of the content pane under a top app bar. They display the main content destinations.\n\nSecondary tabs are used within a content area to further separate related content and establish hierarchy.\n\n![Three primary tabs above three secondary tabs.]\n\nPrimary tabs Secondary tabs",
                    "Related content": "Use tabs to group related content, not *sequential* content.\n\n![Scrolling up and down through content, then swiping left through tabs.]\n\n![Swiping to change tabs accidentally swipes to delete a list item in the UI instead.]"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![Five components of tabs.]\n\nContainer Icon (optional) Label Active indicator Divider",
                    "Container": "The container holds multiple tabs. Its contents can be fixed or scrollable.\n\nThe container should always extend the full width of the window and be divided into equal sections, one for each tab.\n\nThe container is defined by a divider on the bottom edge to separate it from the content below. Content may scroll under the container.\n\n![Mobile screen with fixed tabs with a dotted border to illustrate the container area.]\n\nThe container holds all tabs. It is place under the top app bar at the top of the content area.",
                    "Icon (optional)": "Icons communicate the type of content within a tab. Icons should be simple and recognizable.\n\n![Mobile screen with tabs that use both icons and labels.]\n\nTabs can use a combination of labels and icons\n\n \n\nIcons alone aren\u2019t as effective as text labels at communicating complex content.\n\nUse caution when representing tab content with icons alone, as an icon\u2019s meaning may not be clear.\n\n![Mobile screen with tabs represented by icons  for \u201cwishlist\u201d and \u201clocation\u201d.]\n\n![Mobile screen where \"purchases\u201d tab has text only and \u201cwishlist\u201d tab has text and icon.]",
                    "Label": "Text labels should clearly and succinctly describe the content within the tab.\n\nTab labels appear in a single row. Labels can use a second line if needed, with truncated text. Alternatively, scrollable tabs can allow room for longer titles.\n\n![Mobile screen with scrollable tabs in a single row.]\n\nTab labels should be short and succinct\n\n \n\nWhen using scrollable tabs, the first visible tab should be offset from the left side of the device for both web and mobile. The width of each tab is defined by the length of its text label.\u2028\u2028\n\nAvoid using inconsistent padding on each tab.\n\n![Scrollable tabs are offset from the left on a mobile screen.]\n\n![Screen with scrollable tabs, 2 of which are truncated to \u201cAustralian\u201d showing how truncation can confuse users.]",
                    "Active indicator": "To differentiate an active tab from an inactive tab, apply an underline and color change to the active tab\u2019s text and icon.\n\n\n\nAn underline and color change differentiate an active tab from the inactive ones",
                    "Primary and secondary tabs": "Primary tabs should be used when just one set of tabs are needed.\n\nSecondary tabs are necessary when a screen requires more than one level of tabs. These tabs use a simpler style of indicator, but their function is identical to primary tabs.\n\n![Mobile screen with primary tabs near the top of the screen.]\n\nTabs can be joined with components like top app bars, embedded in a specific UI region, or nested within components like cards and sheets. Tabs control the UI region displayed below them."
                },
                "Placement": {
                    "general": {},
                    "soft": "Tabs are displayed in a single row, with each tab connected to the content it represents. As a set, all tabs are unified by a shared topic.\n\nSecondary tabs should always be placed below primary tabs.\n\n![Mobile screen with secondary tabs below the primary tabs.]\n\nSecondary tabs are found within other content to assist users with greater detail"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "For fixed tabs, the maximum width for each tab should be determined by the width of the widest tab. The group of tabs should use a fluid margin and align to the center or leading edge of the body region.\n\n![3 tabs each taking up one-third of the container width despite differences in label text length.]\n\nTabs can grow in width in relation to the number of items contained within"
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "States": "By default, tabs inherit enabled states with one active state.\n\nThe inactive and active states of a tab can inherit a hover, focus, and pressed states. \n\n![Four states of a tab.]\n\nActive, hover, focused, and pressed states",
                    "Fixed tabs": "Fixed tabs display all tabs in a set simultaneously. They are best for switching between related content quickly, such as between transportation methods in a map. To navigate between fixed tabs, tap an individual tab, or swipe left or right in the content area.\n\n\n\nFixed tabs allow users to see all possible types of content available\n\n \n\n**Tap a tab**\n\nNavigate to a tab by tapping on it.\n\n\n\nTapping on a tab directly\n\n \n\n**Swipe within the content area**\n\nTo navigate between tabs, users can swipe left or right within the content area.\n\n\n\nUsers can swipe between fixed tabs to see related content quickly\n\n \n\nUse caution when placing other swipeable content (such as interactive maps or list items) in the content area.",
                    "Scrollable tabs": "When a set of tabs cannot fit on screen, use scrollable tabs. Scrollable tabs can use longer text labels and a larger number of tabs. They are best used for browsing on touch interfaces.\n\n\n\nPadding should remain the same when using scrolllable tabs and long labels"
                }
            }
        }
    },
    {
        "component_type": "text fields",
        "description": "A component that lets users enter and edit text. [Learn more about text fields](https://m3.material.io/m3/pages/text-fields/overview)",
        "guidelines": {
            "docs_path": "text-fields_guidelines.md",
            "hard": {
                "do": [
                    "Choosing text fields#Using both types of text field on the same screen#When using both types of text fields in a UI, separate them by region",
                    "Anatomy#Error text#Swap supporting text with error text"
                ],
                "dont": [
                    "Choosing text fields#Using both types of text field on the same screen#When using both types of text fields, don't use both next to each other or within the same form",
                    "Anatomy#Label text#Don\u2019t truncate label text. Keep it short, clear, and fully visible",
                    "Anatomy#Label text#Label text shouldn\u2019t take up multiple lines",
                    "Anatomy#Error text#Don't add error text in addition to supporting text, as their appearance will shift content",
                    "Responsive layout#None#Don\u2019t used fixed text field margins on large devices. Text fields shouldn\u2019t span the full width of a large screen."
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Use a text field when someone needs to enter text into a UI, such as filling in contact or payment information.\n\n![Mobile UI of contact form with several text fields. ]\n\nContact form using outlined text fields\n\n \n\nThere are two types of text fields:\n\n1. Filled text fields\n2. Outlined text fields\n\nBoth types of text fields use a container to provide a visual cue for interaction and provide the same functionality,\n\n![Side by side view of a populated and unpopulated filled text field. ]\n\nFilled text field\n\n![Side by side view of a populated and unpopulated outlined text field. ]\n\nOutlined text field",
                    "Outlined text fields": "Outlined text fields have less visual emphasis than filled text fields. When they appear in places like forms (where many text fields are placed together) their reduced emphasis helps simplify the layout.\n\n![App screen with a focused outlined text field. ]\n\nLogin screen with outlined text fields"
                },
                "Choosing text fields": {
                    "general": {},
                    "soft": "Both types of text field provide the same functionality, so the type of text field you use can depend on style alone.\n\nChoose the type that:\n\n- Works best with your app\u2019s visual style\n- Best accommodates the goals of your UI\n- Is most distinct from other components (like buttons) and surrounding content\n\n![Mobile UI of a contact form with several filled text fields. ]\n\nMobile form using filled text fields\n\n![Mobile UI of a contact form with several outlined text fields. ]\n\nThe same mobile form using outlined text fields",
                    "Using both types of text field on the same screen": "If both types of text field are used in a UI, they should be used consistently within different sections, and not intermixed within the same region. For example, you could use outlined text fields in one section and filled text fields in another.\n\n![Mobile UI of a contact form with several filled text fields, and an open dialog on top using an outlined text field. ]\n\n![MMobile UI of a contact form with a mix of outlined and filled text fields.]"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "",
                    "Filled text field": "![Diagram of an outlined text field indicating the 9 parts of its anatomy]\n\nContainer (enabled)Leading icon (optional)Label text (unpopulated)Label text (populated)Trailing icon (optional)Active Indicator (focused)CaretInput textSupporting text (optional)Active indicator (enabled)",
                    "Outlined text field": "![Diagram of filled text field indicating the 10 parts of its anatomy]\n\nContainer outline (enabled)Label text (empty)Leading icon (optional)Label text (populated)Trailing icon (optional)Container outline (focused)CaretInput textSupporting text (optional)",
                    "Containers": "Containers improve the discoverability of text fields by creating contrast between the text field and surrounding content.\n\n**Fill and stroke**\nA text field container has a fill and a stroke (either around the entire container, or just the bottom edge). The color and thickness of a stroke can change to indicate when the text field is active. \n\n**Rounded corners**\nThe container of an outlined text field has rounded corners, while the container of a filled text field has rounded top corners and square bottom corners.\n\n![Side by side view of the containers of a filled and outlined text field.]\n\nText field containers",
                    "Label text": "Label text informs users about what information is requested for a text field. Every text field should have a label.\n\nLabel text should be aligned with the input text, and always visible. It can be placed in the middle of a text field, or rest near the top of the container.\n\nLabel text shouldn't be truncated or take up multiple lines. Keep it short, clear, and fully visible.\n\n\n\nLabel text should always be visible. When the field is selected, the label text moves from the middle of the text field to the top.\n\n \n\n![Text field with very long label text, too long to display fully display inside the text field container.]\n\n![Text field with very long label text, too long to display fully display inside the text field container.]",
                    "Adjacent label": "A text field doesn't require a label if the field's purpose is indicated by a separate, adjacent label. \n\nAdjacent labels should be aligned to the leading edge of the text field container.\n\n![Mobile UI of a contact form with label texts placed outside and on top of the text fields. ]\n\nText fields with adjacent labels",
                    "Required text indicator": "To indicate that a field is required, display an asterisk (*) next to the label text and mention in supporting text that the asterisks indicate required fields.\n\n- If some fields are required, indicate all required ones\n- If most fields are required, indicate optional fields by displaying the word \u201coptional\u201d in parentheses next to the label text\n- If required text has a particular color, that color should also be used for the asterisk\n\n![Mobile UI of a contact form showing supporting text below the text field, indicating an input is required. ]\n\nRequired text with asterisk",
                    "Input text": "Input text is text the user has entered into a text field.\n\nText fields can display user input text in the following ways:\n\n- **Single line** text fields display only one line of text\n- **Multi-line** text fields grow to accommodate multiple lines of text\n- **Text areas** are fixed-height fields\n\n![Text field with populated input text. ]\n\nInput text in a filled text field\n\n \n\n\n\nIn single-line fields, as the cursor reaches the right field edge, text longer than the input line automatically scrolls left. Single-line fields are not suitable for collecting long responses. For those, use a multi-line text field or text area instead.\n\n\n\nOverflow text causes the text field to expand (shifting screen elements downward), and text wraps onto a new line.  These fields initially appear as single-line fields, which is useful for compact layouts that need to be able to accommodate large amounts of text.\n\n\n\nText areas are taller than text fields and wrap overflow text onto a new line. They are a fixed height and scroll vertically when the cursor reaches the bottom of the field.  The large initial size indicates that longer responses are possible and encouraged.  These should be used instead of multi-line fields on the web. Ensure the height of a text area fits within mobile screen sizes.",
                    "Prefix text": "Text fields can contain prefix text such as a currency symbol.\n\n![Text field with a currency prefix before the input text. ]\n\nA text field with a currency symbol text prefix",
                    "Suffix text": "Text fields can contain suffix text such as unit of measurement or email domain.\n\n![Text field with a suffix after the input text indicating a maximum input of one hundred. ]\n\nA text field with a grading scale as suffix\n\n![Text field with a suffix after the input text indicating an email address. ]\n\nText field with an email domain address suffix",
                    "Supporting text and character counter": "Supporting text conveys additional information about the input field, such as how it will be used. It should ideally only take up a single line, though may wrap to multiple lines if required, and be either persistently visible or visible only on focus.\n\nCharacter or word counters should be used if there is a character or word limit. They display the ratio of characters used and the total character limit.\n\n![Mobile UI of a sign up form indicating a invalid entry, and a hint on how to resolve as supporting text below the container. ]\n\nSupporting textCharacter counter",
                    "Error text": "For text fields that validate their content (such as passwords), replace supporting text with error text when applicable. Swapping supporting text with error text helps prevent new lines of text from being introduced into a layout, thus bumping content to fit it.\n\n- If only one error is possible, error text describes how to avoid the error\n- If multiple errors are possible, error text describes how to avoid the most likely error\n\n\n\n \n\n\n\n![Mobile UI of a sign up form indicating a invalid entry, showing a supporting text wrapping into two lines due to its length. ]\n\nexclamationCautionLong errors can wrap to multiple lines if there isn't enough space to clearly describe the error. In this case, ensure padding between text fields is sufficient to prevent multi-lined errors from bumping layout content.",
                    "Icons & images": "Icons in text fields are optional. Text field icons can describe valid input methods (such as a microphone icon), provide affordances to access additional functionality (such as clearing the content of a field), and can express an error.\n\nLeading and trailing icons change their position based on LTR or RTL contexts.\n\nImages that are 24dp in height can be placed inside of text fields. This image height allows for optimal top and bottom padding within the field and is consistent with the size recommendation for icons.\n\n \n\n1. Icon signifier \n   Icon signifiers can describe the type of input a text field requires, and be touch targets for nested components. For example, a calendar icon may be tapped to reveal a date picker.\n2. Valid or error icon\n   Iconography can indicate both valid and invalid inputs, making error states clear for colorblind users. \n3. Clear icon\n   Clear icons let users clear an entire input field. They appear only when input text is present.\n4. Voice input icon\n   A microphone icon signifies that users can input characters using voice. \n5. Dropdown icon\n   A dropdown arrow indicates that a text field has a nested selection component.\n6. Image\n   An image can help to contextualize data input. For example when a user is required to enter credit card information. \n\n![Side by side view of text fields with different icons and images as trailing elements within the container. ]\n\nIcon signifier Valid or error icon Clear icon Voice input iconDropdown icon Image",
                    "Read-only fields": "Read-only text fields display pre-filled text that the user cannot edit. A read-only text field is styled the same as a regular text field and is clearly labeled as read-only.\n\n![Read only filled text field. ]\n\nA filled read-only text field\n\n![Read only outlined text field. ]\n\nAn outlined read-only text field"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "As layouts adapt to larger screens and different [window size classes], apply flexible container dimensions to text fields. Set minimum and maximum values for margins, padding, and container dimensions as layouts scale so that typography adjusts for better reading experiences.\n\n \n\n![UI for creating a new album in a side by side view on mobile and tablet. ]\n\nText fields can span the full width of the display on compact window sizes, but should be bounded by flexible margins or other containers on medium and expanded window sizes.\n\n \n\nAs text fields expand within fluid layouts, avoid maintaining fixed margins and typography properties because this can lead to extra long text fields. Text fields should not, for example, span the full width of a large screen.\n\n![Tablet UI with text fields spanning the complete width of the screen. ]"
                }
            }
        }
    },
    {
        "component_type": "time pickers",
        "description": "A component that helps users select and set a specific time. [Learn more about time pickers](https://m3.material.io/m3/pages/time-pickers/overview)",
        "guidelines": {
            "docs_path": "time-pickers_guidelines.md",
            "hard": {
                "do": [],
                "dont": [
                    "Responsive layout#Density#Don\u2019t apply density to the time picker dial when viewport is constrained. Instead, use an input picker."
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Time pickers allow people to enter a specific time value. They\u2019re displayed in dialogs and can be used to select hours, minutes, or periods of time.\n\nThey can be used for a wide range of scenarios. Common use cases include:\n\n- Setting an alarm\n- Scheduling a meeting\n\nTime pickers are not ideal for nuanced or granular time selection, such as milliseconds for a stopwatch application.\n\n![Time picker with dial input selecting hour 7.]\n\nHour selection in a mobile calendar picker",
                    "Time input picker": "Time input pickers allow people to specify a time using keyboard numbers. This input option should be accessible from any other mobile time picker interface by tapping the keyboard icon.\n\n![Input time picker with keyboard active for the hour.]\n\nHour input with keyboard entry",
                    "24 hour time selection": "The dial view can be changed to reflect time selection across 24 hours. This option is set outside of the time picker component, typically through system settings.\n\n![24-hour time picker with dial input selecting hour 20.]\n\n24 hour dial view"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![17 elements of a dial time picker.]\n\nLabel (headline)Time selector separatorInput field\u2028Input text Period selector (selected)Period selector text (selected)ContainerPeriod selector outlinePeriod selector textDial selector trackDial label (selected)Text buttonsIcon buttonDial label (unselected)Clock dialInput text (selected)Input field (selected)\n\n![13 elements of an input time picker.]\n\nLabel (headline)Time selector separatorInput field\u2028Input text Period selector (selected)Period selector text (selected)ContainerPeriod selector outlinePeriod selector text (unselected)Text buttonsIcon buttonInput text (selected)Input field (selected)",
                    "Container": "Like dialogs, the container should appear above other screen elements. To focus attention, surfaces behind the container have a temporary scrim overlay to make them less prominent.\n\n![Time picker container, all elements inside.]\n\nThe container includes all time picker elements",
                    "Input selector": "The input selector is a unique type of text field input. It differs from typical text field inputs in that it has:\n\n- An added highlight to call attention to the selected field\n- A larger shape, size, and font\n- A label below the field\n\nHours and minutes should have separate inputs. For people using a 12 hour clock, an AM/PM selector appears to the right of minutes. For people using a 24 hour clock, the AM/PM selector should not be present.\n\n![Input time picker with the hour field active, and so highlighted.]\n\nInput selector for a 12 hour clock",
                    "Dial selector": "Dial selectors always mimic a round watch face. Hours and minutes can be selected by tapping a number or dragging the dial selector track.\n\nWhen representing a 12 hour dial, all numbers appear in the outer ring. When representing a 24 hour dial, even numbers appear in an inner ring, and odd numbers appear in the outer ring.\n\n![Dial time picker with hour 7 selected.]\n\nDial selector for a 12 hour clock",
                    "Text and icon buttons": "Icon buttons are used to switch between the input selector, represented by a keyboard, and the dial selector, represented by a clock.\n\nText buttons are used to exit the dialog (**Cancel**) and save the selector input (**OK**).\n\n![Time picker buttons.]\n\nThe keyboard icon allows people to switch between the dial selector (pictured) and the input selector",
                    "Landscape orientation": "The clock dial interface adapts to a device\u2019s orientation. In landscape mode, the stacked input and selection options are positioned side-by-side.\n\n![Time picker in landscape orientation on mobile.]\n\nOn mobile, the time picker can adapt to landscape orientation"
                },
                "Placement": {
                    "general": {},
                    "soft": "Time pickers shouldn\u2019t be obscured by other elements.\u2028\u2028\n\nTime pickers should change orientation or type to ensure they aren't cropped by the edge of the screen.\n\nTime pickers are modal windows above a scrim. This puts the time pickers at the forefront of the user's view, calling attention to make a selection of time.\n\n![Input time picker in landscape orientation on mobile. It's fully visible despite the limited device height.]\n\nThe time picker should change to fit the size of the screen so the time picker is always fully visible"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "Time pickers can swap between orientation or type depending on device orientation and viewport constraints.\u2028\u2028\n\nFor example, the time picker can change to landscape orientation on larger breakpoints or when viewport height is limited, to avoid scrolling the dial presentation.\u2028\u2028\n\nTime pickers can fallback to the input time picker when there isn\u2019t enough vertical real estate to present the landscape orientation without scrolling.\n\n![Dial time picker in portrait orientation on mobile.]\n\nHigh density time picker displayed on mobile",
                    "Density": "Don\u2019t apply density to the time picker dial when the viewport is constrained. Instead, use an input picker.\n\n![Dial time picker in portrait orientation, too tall to fully fit on a mobile device in landscape mode.]"
                },
                "Behavior": {
                    "general": {},
                    "soft": "There are two primary methods for selecting time with the mobile time picker. People can:\n\n- Type in a specific value in the hour and minute field\n- Select the hour or minute field from the text input and adjust the clock dial to simultaneously change the corresponding time field above\n\n\n\nThe dial time picker supports both manual and dial input",
                    "Appearing and disappearing": "Like other kinds of dialogs, time pickers use an enter and exit transition pattern to appear on the screen.\n\nTo exit a time picker, the input can either be confirmed (**OK**) or dismissed (**Cancel**). Interacting outside of the dialog will also dismiss the time picker. Unless one of these actions is taken, a time picker will continue to retain focus.\n\n\n\n**OK** confirms the entry and closes the dialog",
                    "Toggle between dial and input": "Tapping the keyboard icon on a mobile time picker switches the view to the input picker.\n\n\n\nThe icon in the lower left toggles between the input picker and the dial picker"
                }
            }
        }
    },
    {
        "component_type": "tooltips",
        "description": "A component that displays informative text when users hover over, focus on, or tap an element.",
        "guidelines": {
            "docs_path": "tooltips_guidelines.md",
            "hard": {
                "do": [
                    "Usage#None#Use plain tooltips to label icon-only buttons",
                    "Usage#None#Use rich tooltips to provide extra information and actions about a UI element or new feature",
                    "Anatomy#Supporting text#Briefly describe a UI element",
                    "Anatomy#Rich tooltip#Summarize the message in a few words"
                ],
                "dont": [
                    "Usage#None#Plain tooltips aren't needed when the UI element already has label text",
                    "Usage#None#Don't hide critical information within tooltips as it\u2019s easy to miss. Use an interruptive dialog instead.",
                    "Anatomy#Rich tooltip#Avoid wrapping to more than one line",
                    "Behavior#Transient by default#Only display one tooltip at a time"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "A tooltip provides additional context for a UI element. \n\n**Plain tooltips**\nPlain tooltips briefly describe a UI element. They're best used for labelling UI elements with no text, like icon-only buttons and fields.\n\n**Rich tooltips**\nRich tooltips provide additional context about a UI element. They can optionally contain a subhead, buttons, and hyperlinks.\n\nRich tooltips are best used for longer text like definitions or explanations.\n\n![2 types of tooltips.]\n\nPlain tooltipRich tooltip\n\n \n\n![Plain tooltip labelling an icon-only button in Google Meet as \"Present now\".]\n\n![Button with an icon and label text saying \"Edit\". It has a plain tooltip on hover that also says \"Edit\".]\n\n \n\n![Rich tooltip describing a new button for adding people. It has a subhead, description, and a button to learn more.]\n\n![Rich tooltip explaining that an action is destructive and permanently deletes files.]"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "",
                    "Plain tooltip": "![2 elements of a plain tooltip.]\n\nSupporting textContainer",
                    "Supporting text": "![Plain tooltip for an icon-only button shaped like a gear. The tooltip text is \"Settings\".]\n\n![Plain tooltip for the account switcher. It says \"Google Account\", with the user's name and email address on new lines.]\n\nexclamationCaution\n\nAvoid wrapping text to multiple lines or including many pieces of information",
                    "Rich tooltip": "![4 elements of a rich tooltip.]\n\nSubhead (optional)Supporting textText buttons (optional)Container#### Subhead (optional)\nKeep subheads brief, ideally to one line. They should summarize or describe the message of the rich tooltip.\n\nSubheads are important to include when the rich tooltip appears automatically, like when the page loads.\n\n![Rich tooltip with a brief subhead, supporting text, and buttons.]\n\n![Rich tooltip with a subhead wrapping to multiple lines.]\n#### Text buttons (optional)\nRich tooltips can have up to two text buttons. These should be brief and relevant to the message in the supporting text.\n\nKeep buttons short so they can be side by side. Avoid stacking them when possible.\n\n![Rich tooltip with 2 buttons stacked on each other.]\n\nexclamationCaution\n\nAvoid stacking buttons\n"
                },
                "Placement": {
                    "general": {},
                    "soft": "",
                    "Plain tooltips": "By default, plain tooltips are positioned directly above the parent element. \n\n- If there's a visual boundary, like a button, the distance is 4dp\n- If there's no visual boundary, like with text baselines, the distance is 8dp\n\nIf the element is in a [top app bar], the plain tooltip appears below the element at the same distances.\n\n![Plain tooltip appearing 4dp below a button with a clear visual boundary.]\n\nPlain tooltip with a 4dp distance between the target and tooltip",
                    "Rich tooltips": "By default, rich tooltips are positioned to the bottom right of the parent element. They adjust position to avoid going off screen.  Tooltips shouldn't cover the parent element. \n\n**Dynamic positioning**\nThe position of the tooltip adjusts in increments of 8dp to avoid going off-screen.\n\n**Desktop placement**\nOn desktop, tooltips may appear centered below the parent element and remain visible while moving within the target region.\n\n![A rich tooltip in 4 different corners. It   changes position to remain fully on screen.]\n\nFour different rich tooltip locations based on dynamic positioning"
                },
                "Behavior": {
                    "general": {},
                    "soft": "To show a tooltip, hover on the parent element on desktop, or tap and hold the element on mobile. Persistent rich tooltips only appear when clicked or tapped.",
                    "Transient by default": "Both plain and rich tooltips disappear 1.5 seconds after navigating away from the target region.\n\nTriggering a new tooltip immediately closes any other open tooltip.\n\n![Hovering and moving from a button with a plain tooltip.]\n\nTooltips disappear after a 1.5 second delay\n\n \n\n![2 buttons both showing plain tooltips at once.]"
                }
            }
        }
    },
    {
        "component_type": "top app bar",
        "description": "A component that displays information and actions at the top of a screen. [Learn more about top app bars](https://m3.material.io/m3/pages/top-app-bar/overview/)",
        "guidelines": {
            "docs_path": "top-app-bar_guidelines.md",
            "hard": {
                "do": [
                    "Anatomy#Container#Use straight corners for top app bars",
                    "Anatomy#Container#Default heights were chosen to ensure legibility of on-screen elements",
                    "Anatomy#Headline#If headline text is long, use a large top app bar and wrap the headline to two lines",
                    "Anatomy#Trailing interactive icons#Use the overflow menu to collapse less important actions"
                ],
                "dont": [
                    "Anatomy#Container#Don\u2019t use curved shapes on top app bars as it implies that the container can expand upon interaction",
                    "Anatomy#Container#Don't make a top app bar shorter than its default height by applying density",
                    "Anatomy#Headline#Don\u2019t wrap text in a small, medium, or center-aligned top app bar",
                    "Anatomy#Trailing interactive icons#Don\u2019t use more than three action icons"
                ]
            },
            "soft": {
                "Usage": {
                    "general": {},
                    "soft": "Use a top app bar to provide content and actions related to a current screen, such as navigation, screen headlines, and actions.\n\nThe information and actions offered are primarily contextual and specific to a screen, but may also include access to key cross-app journeys.\n\n![Top app bar with content below]\n\nA top app bar provides content and actions related to a current screen\n\n \n\nThere are four types of top app bars:\n\n1. **Center-aligned**\n   For the main root page in an app. Used  to display the app name or page headline.\n2. **Small**\n   For compact layouts or scrolled views on subpages that require back navigation and multiple actions.\n3. **Medium**\n   For the initial state of the small top app bar before scrolling. Used to display a larger headline treatment.\n4. **Large**\n   For an even bigger top app bar. Used to emphasize the headline of the page.\n\n![Diagram of stacked top app bars, from small to large]\n\nCenter-aligned Small Medium Large"
                },
                "Anatomy": {
                    "general": {},
                    "soft": "![ Diagram of app bar layout]\n\nContainerLeading navigation iconHeadlineTrailing interactive icons",
                    "Container": "Top app bar containers hold all information and actions at the top of a screen, including navigation icons, headlines, and interactive icons like the overflow menu.\n\nThe top app bar\u2019s container is full-width and always extends edge-to-edge on a given screen.\n\n![Top app bar with square corner]\n\n![Curved shape on top app bar corner]\n\n \n\nAlways use the default height of a top app bar.\n\n![Top app bar at default height]\n\n![Top app bar shortened ]",
                    "Navigation icon": "Top app bars contain an optional leading navigation icon. When it appears in an app bar, it\u2019s aligned on the left of the bar.\n\nThe navigation icon can take any of the following forms:\n\n- A menu icon, which opens a navigation\n- A back arrow, which returns to the previous screen\n\n![Leading navigation icon aligned on left of app bar]\n\nNavigation icon",
                    "Headline": "The top app bar headline can describe:\n\n- The screen a user is currently on\n- The section the user is currently in\n- The app being used\n\nHeadline text should easily fit within the top app bar. It should not be truncated or shrunken.\n\n![Top app bar headline text set in 2 lines]\n\n![Top app bar headline text in too small setting]\n\n \n\nHeadlines for small, medium, and large top app bars are aligned to the start edge of the container. Headlines for center aligned top app bars are center aligned.\n\nThe headline\u2019s typography size and style varies depending on the type of top app bar. [See the specs tab for precise values]\n\n![Diagram of stacked top app bars with headline sizes, from small to large]\n\nCenter aligned Small Medium Large",
                    "Trailing interactive icons": "Up to three interactive icons can be placed after the headline, at the trailing end of the container.\n\nPlace most-used actions closest to the leading edge and progress towards the end.\n\n![3 icons placed to right of headline, from most to least used]\n\nOrder action items by putting the most-used action (1) on the far left, second-most-used action (2) to its right, and so on. Any remaining or secondary actions should be placed in an overflow menu (3).\n\n \n\nWhen there are more than three interactive icons, the less important ones can be collapsed into an overflow menu. The overflow menu then takes the place of a third action.\n\n![Overflow menu showing 2 collapsed icons]\n\n![ 4 icons set to right of headline]"
                },
                "Responsive layout": {
                    "general": {},
                    "soft": "",
                    "Compact": "For the compact [window size class], the container occupies 100% of the screen width.\n\n![Container taking entire screen width]\n\nOn compact windows, the top app bar stretches the full width",
                    "Medium": "For the medium window size class, the container occupies 100% of the screen width.\n\n![Container taking entire screen width]\n\nOn medium windows, the top app bar stretches the full width",
                    "Expanded": "For the expanded window size class, the top app bar container occupies 100% of the screen width.\n\n \n\n![Top app bar expands to take total screen width]\n\nOn expanded windows, the top app bar stretches the full width"
                },
                "Behavior": {
                    "general": {},
                    "soft": "",
                    "Scrolling": "Top app bars are positioned within the same space as content.\n\nOnly upon scrolling, the top app bar container fills with a contrasting color that provides visual separation from the background.\n\n\n\nUpon scrolling, a top app bar container fills with contrasting color to create a visual separation\n\n \n\n\n\nUpon scrolling, the top app bar can remain in place, or use a compress effect in which:\n\n1. Scrolling upward hides the top app bar\n2. Scrolling downward reveals the top app bar\n\n\n\nWhen scrolling up, Medium top app bars can use the compress effect to transform into Compact top app bars. They should not return to Medium size until the user scrolls back to the top of the page.",
                    "Nesting actions": "When a screen is resized, the top app bar resizes with it. Actions are consolidated into the overflow menu.\n\n\n\nA resized screen has a resized top app bar, with actions consolidated into the overflow menu"
                }
            }
        }
    }
]